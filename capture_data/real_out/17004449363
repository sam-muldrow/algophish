<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="Programming, Web Development, and DevOps news, tutorials and tools for beginners to experts. Hundreds of free publications, over 1M members, totally free.">

    <meta property="og:description" content="Programming, Web Development, and DevOps news, tutorials and tools for beginners to experts. Hundreds of free publications, over 1M members, totally free.">
    <meta property="og:site_name" content="DZone">
    <meta property="og:title" content="DZone: Programming & DevOps news, tutorials & tools">
    <meta property="og:url" content="https://dzone.com">
    <meta property="og:image" content="https://dz2cdn1.dzone.com/themes/dz20/images/dz_logo_2021_cropped.png">
    <meta property="og:type" content="article">

    <meta name="twitter:site" content="@DZoneInc">
    <meta name="twitter:image" content="https://dz2cdn3.dzone.com/themes/dz20/images/dz_logo_2021_cropped.png">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:description" content="Programming, Web Development, and DevOps news, tutorials and tools for beginners to experts. Hundreds of free publications, over 1M members, totally free.">
    <meta name="twitter:title" content="DZone: Programming & DevOps news, tutorials & tools">

    <meta name="referrer" content="origin-when-cross-origin">
    <meta name="google-site-verification" content="kndbhxcupfEqWmZclhCpB6vlgOs7QSmx2UHAGGnP2mA">
    <meta name="df-verify" content="df0d76632b4543">

    <link rel="icon" type="image/x-icon" href="https://dz2cdn1.dzone.com/themes/dz20/images/favicon.png">
    <link rel="image_src" href="https://dz2cdn4.dzone.com/themes/dz20/images/dz_logo_2021_cropped.png">
    <link rel="canonical" href="https://dzone.com">

    <title>DZone: Programming & DevOps news, tutorials & tools</title>

    <link rel="preload" href="https://dz2cdn1.dzone.com/themes/dz20/font/fontello.woff?11773374" as="font" type="font/woff" crossorigin="anonymous">

    <link rel="stylesheet" media="all" href="https://dz2cdn4.dzone.com/themes/dz20/ftl/icons.css">
    <link rel="stylesheet" media="all" href="https://dz2cdn1.dzone.com/themes/dz20/lib/static/bootstrap/bootstrap.min.css">
    <link rel="stylesheet" media="all" href="https://dz2cdn2.dzone.com/themes/dz20/ftl/article/global.css">
    <link rel="stylesheet" media="all" href="https://dz2cdn2.dzone.com/themes/dz20/ftl/header-updated/styles.css">
    <link rel="stylesheet" media="all" href="https://dz2cdn1.dzone.com/themes/dz20/ftl/colors.css">
    <link rel="stylesheet" media="all" href="https://dz2cdn4.dzone.com/themes/dz20/ftl/home/styles.css">
    <link rel="stylesheet" media="all" href="https://dz2cdn2.dzone.com/themes/dz20/ftl/home/styles-assets.css">
    <link rel="stylesheet" media="all" href="https://dz2cdn4.dzone.com/themes/dz20/ftl/tagging/styles.css">
    <link rel="stylesheet" media="all" href="https://dz2cdn2.dzone.com/themes/dz20/ftl/animations.css">
</head><body>
<header id="ftl-header">
    <div class="header-top"> 
<div class="header-container">
    <div class="pull-left logo-container">
        <div class="logo">
            <a class="inner" href="/">
                <picture>
                    <source srcset="https://dz2cdn3.dzone.com/themes/dz20/images/dz_logo_2021_cropped.webp" type="image/webp">
                    <source srcset="https://dz2cdn4.dzone.com/themes/dz20/images/dz_logo_2021_cropped.png" type="image/png">
                    <img src="https://dz2cdn1.dzone.com/themes/dz20/images/dz_logo_2021_cropped.png" width="181" height="56" alt="DZone">
                </picture>
            </a>
        </div>
    </div>

    <div class="pull-right login-and-search">
        <div id="authenticated-block" class="logged-in">
            <div class="welcome-back">Thanks for visiting DZone today,</div>
            <div id="user-header" class="user-info">
                <button class="user-avatar">
                    <span id="header-username" class="username"></span>
                    <img id="header-avatar" src="" alt="user avatar">
                </button>
                <div id="user-dropdown" class="browse-user-menu">
                    <div class="user-content">
                        <a id="header-user-plug" href="#" class="user-description"></a>
                        <a id="header-user-edit" href="#" class="edit-profile">Edit Profile</a>
                    </div>
                    <ul class="user-actions">
                        <li id="first-user-action"><a id="header-dropdown-manage-email" href="#">Manage Email Subscriptions</a></li>
                        <li>
                            <a href="/articles/how-to-submit-a-post-to-dzone?utm_source=DZone&utm_medium=user_dropdown&utm_campaign=how_to_post">
                                How to Post to DZone
                            </a>
                        </li>
                        <li>
                            <a href="/articles/dzones-article-submission-guidelines">
                                Article Submission Guidelines
                            </a>
                        </li>
                    </ul>
                    <div class="bottom">
                        <a href="/users/logout.html" class="sign-out">Sign Out</a>
                        <a id="dropdown-view-profile" href="#" class="view-profile">View Profile</a>
                    </div>
                </div>
            </div>

            <div class="post-content">
                <button id="post-button" class="post-content--button">
                    <span class="post-class">Post</span>
                    <i class="icon-plus"></i>
                </button>

                <div id="post-menu" class="posting-links">
                    <div class="posting-links-menu">
                        <ul>
                            <li>
                                <img src="/themes/dz20/images/dz-postarticle.svg" width="15" height="18" style="width: 15px; height: 18px;">
                                <a href="/content/article/post.html">Post an Article</a>
                            </li>
                            <li>
                                <a id="drafts-link" href="#">Manage My Drafts</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div id="unauthenticated-block">
            <div class="dz-intro">Over 2 million developers have joined DZone.</div>
            <div class="mobile-invisible sign-in-join">
                <a href="/users/login.html">Log In</a>
                <span class="dz-intro-span">/</span>
                <a href="/static/registration.html">Join</a>
            </div>
            <a class="join-icon" href="/users/login.html"><i class="icon-user"></i></a>
        </div>
        <div class="headerSearch">
            <a class="icon-search dropdown-toggle" href="/search"></a>
        </div>
    </div>
</div>    </div>
    <div class="header-bottom">
        <div class="header-bottom-container">
            <a class="resource-link" href="/refcardz">Refcards</a>
            <a class="resource-link" href="/trendreports">Trend Reports</a>
            <div class="resource-link link-menu">
                <a href="/events">Events</a>
                <a href="/events/video-library">Video Library</a>
            </div>
            <span class="right-label unauthenticated">
                Over 2 million developers have joined DZone. <a class="label-emphasis" href="/static/registration.html">Join Today!</a>
            </span>
            <span class="right-label authenticated user-menu-parent">
                <span class="welcome-slogan">Thanks for visiting DZone today, </span>
                <div class="header-menu user-menu" data-click-activation>
                    <a class="label-emphasis" href="javascript:void(0)">
                        <span id="header-user-name"></span>
                        <div class="header-user-dot-menu"><i class="icon-dot-3"></i></div>
                    </a>
                    <div class="header-menu-items">
                        <a id="header-user-edit-profile" class="header-menu-item" href="javascript:void(0)">Edit Profile</a>
                        <a id="header-user-email-preferences" class="header-menu-item" href="javascript:void(0)">Manage Email Subscriptions</a>
                        <a class="header-menu-item" href="/moderation/list.html">Moderation</a>
                        <a class="header-menu-item" href="/dzone/staff/index.html">Admin Console</a>
                        <a class="header-menu-item" href="/articles/how-to-submit-a-post-to-dzone?utm_source=DZone&utm_medium=user_dropdown&utm_campaign=how_to_post">How to Post to DZone</a>
                        <a class="header-menu-item" href="/articles/dzones-article-submission-guidelines">Article Submission Guidelines</a>
                        <a id="header-user-profile" class="header-menu-item menu-item-btn-container" href="javascript:void(0)"><div class="menu-item-btn">View Profile</div></a>
                        <a class="header-menu-item menu-item-btn-container" href="/users/logout.html"><div class="menu-item-btn danger">Sign Out</div></a>
                    </div>
                </div>
            </span>
        </div>
    </div>
    <nav class="header-menu-bar">
        <div class="header-menu resource-category">
            <a href="/refcardz">Refcards</a>
        </div>
        <div class="header-menu-separator resource-category-separator"></div>
        <div class="header-menu resource-category">
            <a href="/trendreports">Trend Reports</a>
        </div>
        <div class="header-menu-separator resource-category-separator"></div>
        <div class="header-menu resource-category no-bottom-radius" tabindex="1" data-click-activation>
            <a href="javascript:void(0)">Events</a>
            <div class="header-menu-items">
                <div class="header-menu-columns">
                    <a class="header-menu-item" href="javascript:void(0)" data-goto="/events">View Events</a>
                    <a class="header-menu-item" href="javascript:void(0)" data-goto="/events/video-library">Video Library</a>
                </div>
            </div>
        </div>
    </nav>
</header>

<script>
    const csrf = {
        parameter: 'TH_CSRF',
        header: 'X-TH-CSRF',
        token: '-4684842035824420881'
    }; // set csrf for auth-status script
</script>
<script>
addEventListener('DOMContentLoaded', function() {
    handleRedirects();
    handleMenus();
    // handleSearch(); // re-enable when we move to new top header
    handleMobileMenuHeights();
    handleGotoLinks();
});

function isHidden(element) {
    try {
        return window.getComputedStyle(element).display === 'none';
    } catch (_) {
        return false;
    }
}

function getLink(element) {
    if (element.hasAttribute('data-goto')) {
        return element.getAttribute('data-goto');
    }
    return element.href;
}

function isLeftClick(event) {
    if (event.altKey || event.shiftKey) {
        return false;
    } else if ('buttons' in event || 'which' in event) {
        return event.buttons === 1 || event.which === 1;
    } else {
        return (event.button === 1 || (event.type === 'click'));
    }
}

function handleRedirects() {
    const redirections = [...document.querySelectorAll('[data-activate-menu]'), ...document.querySelectorAll('[data-click-target]')];

    redirections.forEach(function(element) {
        const menuSelector = element.getAttribute('data-activate-menu') || element.getAttribute('data-click-target');
        const redirectingElement = document.querySelector(menuSelector);
        if (redirectingElement) {
            element.style.cursor = 'pointer';
            const redirect = function(e) {
                if (redirectingElement.hasAttribute('href') || redirectingElement.hasAttribute('data-goto')) {
                    if (redirectingElement.hasAttribute('data-new-window') || e.ctrlKey || e.metaKey) {
                        window.open(getLink(redirectingElement), '_blank');
                    } else {
                        window.open(getLink(redirectingElement), '_self');
                    }
                } else {
                    const evt = new e.constructor(e.type, e);
                    redirectingElement.dispatchEvent(evt);
                }
            };
            element.addEventListener('mouseup', redirect);
            element.addEventListener('mousedown', (e) => e.preventDefault());
            element.addEventListener('click', (e) => e.preventDefault());
        }
    });
}

function handleMenus() {
    const menuElements = document.querySelectorAll('.header-menu > a');

    let scrollYMemory = -1;

    function scrollToMemory() {
        if (scrollYMemory !== -1) {
            setTimeout(function() {
                window.scrollTo(0, scrollYMemory);
                scrollYMemory = -1;
            }, 10);
        }
    }

    function hideMenus() {
        // unfocus menus & items, and set the menus to non-visible.
        menuElements.forEach(function (element) {
            element.blur();
            element.parentElement.blur();
            element.parentElement.classList.remove('menu-opened');
            const menuItems = element.parentElement.querySelector('.header-menu-items');
            if (menuItems) {
                menuItems.style.display = 'none';
            }
        });
        const wasHidden = document.body.style.overflowY === 'hidden';
        document.body.style.overflowY = 'auto';
        if (wasHidden) {
            scrollToMemory();
        }
    }

    function isEventOutsideMenu(e) {
        return e.target.closest && !e.target.closest('.header-menu') && !e.target.closest('[data-activate-menu]');
    }

    // Handle mobile menu toggling
    menuElements.forEach(function(element) {
        const menu = element.parentElement;
        const headerItems = menu.querySelector('.header-menu-items');
        const menuEntries = headerItems ? headerItems.querySelectorAll('.header-menu-item') : [];

        const focus = function() {
            menu.focus();
            menu.classList.add('menu-opened');
            if (headerItems) {
                headerItems.style.display = 'block';
            }
            if (menu.classList.contains('zone-menu')) {
                scrollYMemory = window.scrollY;
                document.body.style.overflowY = 'hidden';
            } else {
                scrollYMemory = -1;
            }
        };

        const unfocus = function() {
            menu.blur();
            menu.classList.remove('menu-opened');
            if (headerItems) {
                headerItems.style.display = 'none';
            }
            const wasHidden = document.body.style.overflowY === 'hidden';
            document.body.style.overflowY = 'auto';
            if (wasHidden) {
                scrollToMemory();
            }
        };

        const toggleMenuVisibility = function(e) {
            if ((e.type === 'click' || e.type === 'mouseup') && !isLeftClick(e)) {
                e.preventDefault();
                return;
            }
            const hidden = isHidden(headerItems);
            if (menu.hasAttribute('data-click-activation')) { // handle click activated toggling
                if (hidden) {
                    hideMenus(); // hide other open menus first
                    focus();
                } else {
                    unfocus();
                }
                e.preventDefault();
            } else if (hidden) {
                hideMenus(); // hide other open menus first
                focus();
                e.preventDefault(); // prevent 'click' event from firing when menu is hidden
            }
        };

        element.addEventListener('touchend', toggleMenuVisibility);
        element.addEventListener('mouseup', toggleMenuVisibility);

        // Add hover events to non-click-activated menus, even though CSS should cover it.
        if (!menu.hasAttribute('data-click-activation')) {
            menu.addEventListener('mouseover', function () {
                hideMenus(); // hide other open menus first
                focus();
            });

            menu.addEventListener('mouseout', function (e) {
                if (isEventOutsideMenu(e)) {
                    unfocus();
                }
            });
        }

        // Hide menu when child is clicked
        menuEntries.forEach(function(menuEntry) {
            const linkToItem = function(e) {
                if (e.type === 'mousedown' || e.type === 'click') {
                    e.preventDefault();
                    return;
                }
                if (e.type === 'mouseup' && !isLeftClick(e)) {
                    e.preventDefault();
                    return;
                }
                window.open(getLink(menuEntry), (e.ctrlKey || e.metaKey) ? '_blank' : (menuEntry.target || '_self'));
                unfocus();
                e.preventDefault();
            };

            const linkToMobileItem = function(e) {
                if (e.type === 'touchstart') {
                    menuEntry.setAttribute('data-touchmove', false);
                } else if (e.type === 'touchmove') {
                    menuEntry.setAttribute('data-touchmove', true);
                } else if (e.type === 'touchend' && (!menuEntry.hasAttribute('data-touchmove') || menuEntry.getAttribute('data-touchmove').toLowerCase() === 'false')) {
                    window.open(getLink(menuEntry), (e.ctrlKey || e.metaKey) ? '_blank' : (menuEntry.target || '_self'));
                    unfocus();
                    e.preventDefault();
                }
            };

            menuEntry.addEventListener('mousedown', linkToItem);
            menuEntry.addEventListener('mouseup', linkToItem);
            menuEntry.addEventListener('click', linkToItem);
            menuEntry.addEventListener('touchstart', linkToMobileItem);
            menuEntry.addEventListener('touchmove', linkToMobileItem);
            menuEntry.addEventListener('touchend', linkToMobileItem);
        });
    });

    function hideIfNonMenuBounds(e) {
        if (isEventOutsideMenu(e)) {
            hideMenus();
        }
    }

    addEventListener('mousemove', hideIfNonMenuBounds);
    addEventListener('touchend', hideIfNonMenuBounds);
    addEventListener('mouseup', hideIfNonMenuBounds);
    addEventListener('mousedown', hideIfNonMenuBounds);
    addEventListener('click', hideIfNonMenuBounds);
}

function handleSearch() {
    const userBlock = document.querySelector('#ftl-header .header-top .user-block');
    const loginBlock = document.querySelector('#ftl-header .header-top .user-login');
    const searchBtn = document.querySelector('#header-search-button');
    const searchInput = document.querySelector('#header-search-input');

    function showSearch() {
        userBlock.style.opacity = 0;
        loginBlock.style.opacity = 0;
        setTimeout(function() {
            userBlock.classList.add('hidden');
            loginBlock.classList.add('hidden');
            searchInput.value = '';
            searchInput.style.display = 'unset';
            setTimeout(function () {
                searchInput.style.width = '300px';
                searchInput.focus();
            });
        }, 300);
    }

    function hideSearch() {
        searchInput.value = '';
        searchInput.style.width = '0';
        setTimeout(function() {
            searchInput.style.display = 'none';
            userBlock.classList.remove('hidden');
            loginBlock.classList.remove('hidden');
            setTimeout(function() {
                userBlock.style.opacity = 1;
                loginBlock.style.opacity = 1;
            }, 100);
        }, 250);
    }

    function doSearch() {
        if (!searchInput || !searchInput.value.length) { // hide search if no content
            hideSearch();
        } else if (localStorage) { // execute search
            localStorage.setItem('ls.searchValue', searchInput.value);
            window.location = '/search';
        }
    }

    function searchClick(e) {
        if ((e.type === 'click' || e.type === 'mouseup') && !isLeftClick(e)) {
            e.preventDefault();
            return;
        }
        if (isHidden(searchInput)) { // show search on click when hidden
            showSearch();
        } else if (searchInput.value && searchInput.value.length) { // search on click with content
            doSearch();
        } else { // hide on click without content
            hideSearch();
        }
    }

    if (searchBtn) {
        searchBtn.addEventListener('touchend', searchClick);
        searchBtn.addEventListener('mouseup', searchClick);
    }

    // Search on enter
    if (searchInput) {
        searchInput.addEventListener('keyup', function (e) {
            if (e.keyCode === 13 || e.code === 'Enter') {
                doSearch();
            }
        });
    }
}

function handleMobileMenuHeights() {
    function setAppHeight() {
        document.documentElement.style.setProperty('--app-height', window.innerHeight + 'px');
    }

    addEventListener('resize', function() {
        setAppHeight();
    });

    setAppHeight();
}

function handleGotoLinks() {
    // Add anchor mimicking to elements with data-goto attributes
    // This addresses SEO concerns of linking to noindex pages by allowing JS to handle the URL
    const anchorElements = document.querySelectorAll('*[data-goto]');
    anchorElements.forEach((anchorElement) => {
        anchorElement.addEventListener('mouseover', () => {
            anchorElement.style.cursor = 'pointer';
            anchorElement.style.textDecoration = 'underline';
        });
        anchorElement.addEventListener('mouseout', () => {
            anchorElement.style.cursor = 'unset';
            anchorElement.style.textDecoration = 'unset';
        });
        anchorElement.addEventListener('mouseup', (e) => {
            e.preventDefault();
        });
        anchorElement.addEventListener('mousedown', (e) => {
            e.preventDefault();
        });
        anchorElement.addEventListener('click', (e) => {
            e.preventDefault();
            const anchorHref = anchorElement.getAttribute('data-goto');
            if (anchorElement.hasAttribute('data-new-window') || e.ctrlKey || e.metaKey) {
                window.open(anchorHref, '_blank');
            } else {
                window.open(anchorHref, '_self');
            }
        });
    });
}
</script><script>
const authenticatedBlock = document.querySelector('#authenticated-block');
const unauthenticatedBlock = document.querySelector('#unauthenticated-block');

let authenticated = {
    isAuthenticated: false,
    isAdmin: false
};

fetch('/services/internal/data/articles-getAuthenticationStatus', {
    headers: {
        'Accept': 'application/json'
    }
})
    .then(function (result) {
        return result.json()
    })
    .then(function (result) {
        const res = result.result.data
        if (!res.authenticated) {
            unauthenticatedBlock.classList.add('shown')
        } else {
            bindProps('#header-username', null, null, (res.firstName || res.username), null)
            bindProps('#header-avatar', null, res.avatar, null, null)
            bindProps('#header-user-plug', '/users/' + res.id + '/' + res.plug + '.html', null, res.realName, null)
            bindProps('#header-user-edit', '/users/' + res.id + '/edit.html', null, null, null)
            bindProps('#header-dropdown-manage-email', '/newsletters/' + res.id + '/manage.html', null, null, null)
            bindProps('#dropdown-view-profile', '/users/' + res.id + '/' + res.plug + '.html', null, null, null)
            bindProps('#drafts-link', '/users/' + res.id + '/drafts.html', null, null, null)

            if (res.isAdmin) {
                // Construct backwards so the #after call places elements in the correct order
                const firstUserAction = document.querySelector('#first-user-action')
                const adminConsoleItem = document.createElement('li')
                const adminConsoleLink = createLink('/dzone/staff/index.html', 'Admin Console')
                adminConsoleItem.appendChild(adminConsoleLink)
                firstUserAction.after(adminConsoleItem)

                const moderationItem = document.createElement('li')
                const moderationLink = createLink('/moderation/list.html', 'Moderation')
                moderationItem.appendChild(moderationLink)
                firstUserAction.after(moderationItem)
            }

            authenticated.isAuthenticated = res.authenticated;
            authenticated.isAdmin = res.isAdmin;

            authenticatedBlock.classList.add('shown')
        }
    }).catch(function (result) {
        console.error(result)
})

/**
 * Binds different properties to the selected element.
 *
 * @param selector - Selector to select the element
 * @param href - href attribute value
 * @param src - src attribute value
 * @param innerHTML - innerHTML property value
 * @param innerText - innerText property value
 */
function bindProps(selector, href, src, innerHTML, innerText) {
    const element = document.querySelector(selector)
    if (element) {
        if (href) element.href = href
        if (src) element.src = src
        if (innerHTML) element.innerHTML = innerHTML
        if (innerText) element.innerText = innerText
    }
}

/**
 * Creates a new link element.
 *
 * @param href - href attribute value
 * @param innerText - innerText property value
 * @returns {HTMLAnchorElement} The generated link element
 */
function createLink(href, innerText) {
    const link = document.createElement('a')
    link.href = href
    link.innerText = innerText

    return link
}
</script> 
<script>
const userHeader = document.querySelector('#user-header')
const userDropdown = document.querySelector('#user-dropdown')
const postDropdown = document.querySelector('#post-button')
const postMenu = document.querySelector('#post-menu')

let userDropdownOpen = false
let postDropdownOpen = false

document.addEventListener('click', function(event) {
    if (postDropdown && postDropdown.contains(event.target)) {
        setUserDropdown(false)
        setPostDropdown(!postDropdownOpen)
    } else if (userHeader && userHeader.contains(event.target)) {
        setPostDropdown(false)
        setUserDropdown(!userDropdownOpen)
    } else {
        setUserDropdown(false)
        setPostDropdown(false)
    }
})

function setUserDropdown(value) {
    userDropdownOpen = value
    if (userDropdownOpen) {
        if (userDropdown) {
            userDropdown.classList.add('open')
        }
    } else {
        if (userDropdown) {
            userDropdown.classList.remove('open')
        }
    }
}

function setPostDropdown(value) {
    postDropdownOpen = value
    if (postDropdownOpen) {
        if (postMenu) {
            postMenu.classList.add('open')
        }
    } else {
        if (postMenu) {
            postMenu.classList.remove('open')
        }
    }
}
</script> <script>/*! lazysizes - v5.2.2 */
!function(e){var t=function(u,D,f){"use strict";var k,H;if(function(){var e;var t={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:true,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:true,ricTimeout:0,throttleDelay:125};H=u.lazySizesConfig||u.lazysizesConfig||{};for(e in t){if(!(e in H)){H[e]=t[e]}}}(),!D||!D.getElementsByClassName){return{init:function(){},cfg:H,noSupport:true}}var O=D.documentElement,a=u.HTMLPictureElement,P="addEventListener",$="getAttribute",q=u[P].bind(u),I=u.setTimeout,U=u.requestAnimationFrame||I,l=u.requestIdleCallback,j=/^picture$/i,r=["load","error","lazyincluded","_lazyloaded"],i={},G=Array.prototype.forEach,J=function(e,t){if(!i[t]){i[t]=new RegExp("(\\s|^)"+t+"(\\s|$)")}return i[t].test(e[$]("class")||"")&&i[t]},K=function(e,t){if(!J(e,t)){e.setAttribute("class",(e[$]("class")||"").trim()+" "+t)}},Q=function(e,t){var i;if(i=J(e,t)){e.setAttribute("class",(e[$]("class")||"").replace(i," "))}},V=function(t,i,e){var a=e?P:"removeEventListener";if(e){V(t,i)}r.forEach(function(e){t[a](e,i)})},X=function(e,t,i,a,r){var n=D.createEvent("Event");if(!i){i={}}i.instance=k;n.initEvent(t,!a,!r);n.detail=i;e.dispatchEvent(n);return n},Y=function(e,t){var i;if(!a&&(i=u.picturefill||H.pf)){if(t&&t.src&&!e[$]("srcset")){e.setAttribute("srcset",t.src)}i({reevaluate:true,elements:[e]})}else if(t&&t.src){e.src=t.src}},Z=function(e,t){return(getComputedStyle(e,null)||{})[t]},s=function(e,t,i){i=i||e.offsetWidth;while(i<H.minSize&&t&&!e._lazysizesWidth){i=t.offsetWidth;t=t.parentNode}return i},ee=function(){var i,a;var t=[];var r=[];var n=t;var s=function(){var e=n;n=t.length?r:t;i=true;a=false;while(e.length){e.shift()()}i=false};var e=function(e,t){if(i&&!t){e.apply(this,arguments)}else{n.push(e);if(!a){a=true;(D.hidden?I:U)(s)}}};e._lsFlush=s;return e}(),te=function(i,e){return e?function(){ee(i)}:function(){var e=this;var t=arguments;ee(function(){i.apply(e,t)})}},ie=function(e){var i;var a=0;var r=H.throttleDelay;var n=H.ricTimeout;var t=function(){i=false;a=f.now();e()};var s=l&&n>49?function(){l(t,{timeout:n});if(n!==H.ricTimeout){n=H.ricTimeout}}:te(function(){I(t)},true);return function(e){var t;if(e=e===true){n=33}if(i){return}i=true;t=r-(f.now()-a);if(t<0){t=0}if(e||t<9){s()}else{I(s,t)}}},ae=function(e){var t,i;var a=99;var r=function(){t=null;e()};var n=function(){var e=f.now()-i;if(e<a){I(n,a-e)}else{(l||r)(r)}};return function(){i=f.now();if(!t){t=I(n,a)}}},e=function(){var v,m,c,h,e;var y,z,g,p,C,b,A;var n=/^img$/i;var d=/^iframe$/i;var E="onscroll"in u&&!/(gle|ing)bot/.test(navigator.userAgent);var _=0;var w=0;var N=0;var M=-1;var x=function(e){N--;if(!e||N<0||!e.target){N=0}};var W=function(e){if(A==null){A=Z(D.body,"visibility")=="hidden"}return A||!(Z(e.parentNode,"visibility")=="hidden"&&Z(e,"visibility")=="hidden")};var S=function(e,t){var i;var a=e;var r=W(e);g-=t;b+=t;p-=t;C+=t;while(r&&(a=a.offsetParent)&&a!=D.body&&a!=O){r=(Z(a,"opacity")||1)>0;if(r&&Z(a,"overflow")!="visible"){i=a.getBoundingClientRect();r=C>i.left&&p<i.right&&b>i.top-1&&g<i.bottom+1}}return r};var t=function(){var e,t,i,a,r,n,s,l,o,u,f,c;var d=k.elements;if((h=H.loadMode)&&N<8&&(e=d.length)){t=0;M++;for(;t<e;t++){if(!d[t]||d[t]._lazyRace){continue}if(!E||k.prematureUnveil&&k.prematureUnveil(d[t])){R(d[t]);continue}if(!(l=d[t][$]("data-expand"))||!(n=l*1)){n=w}if(!u){u=!H.expand||H.expand<1?O.clientHeight>500&&O.clientWidth>500?500:370:H.expand;k._defEx=u;f=u*H.expFactor;c=H.hFac;A=null;if(w<f&&N<1&&M>2&&h>2&&!D.hidden){w=f;M=0}else if(h>1&&M>1&&N<6){w=u}else{w=_}}if(o!==n){y=innerWidth+n*c;z=innerHeight+n;s=n*-1;o=n}i=d[t].getBoundingClientRect();if((b=i.bottom)>=s&&(g=i.top)<=z&&(C=i.right)>=s*c&&(p=i.left)<=y&&(b||C||p||g)&&(H.loadHidden||W(d[t]))&&(m&&N<3&&!l&&(h<3||M<4)||S(d[t],n))){R(d[t]);r=true;if(N>9){break}}else if(!r&&m&&!a&&N<4&&M<4&&h>2&&(v[0]||H.preloadAfterLoad)&&(v[0]||!l&&(b||C||p||g||d[t][$](H.sizesAttr)!="auto"))){a=v[0]||d[t]}}if(a&&!r){R(a)}}};var i=ie(t);var B=function(e){var t=e.target;if(t._lazyCache){delete t._lazyCache;return}x(e);K(t,H.loadedClass);Q(t,H.loadingClass);V(t,L);X(t,"lazyloaded")};var a=te(B);var L=function(e){a({target:e.target})};var T=function(t,i){try{t.contentWindow.location.replace(i)}catch(e){t.src=i}};var F=function(e){var t;var i=e[$](H.srcsetAttr);if(t=H.customMedia[e[$]("data-media")||e[$]("media")]){e.setAttribute("media",t)}if(i){e.setAttribute("srcset",i)}};var s=te(function(t,e,i,a,r){var n,s,l,o,u,f;if(!(u=X(t,"lazybeforeunveil",e)).defaultPrevented){if(a){if(i){K(t,H.autosizesClass)}else{t.setAttribute("sizes",a)}}s=t[$](H.srcsetAttr);n=t[$](H.srcAttr);if(r){l=t.parentNode;o=l&&j.test(l.nodeName||"")}f=e.firesLoad||"src"in t&&(s||n||o);u={target:t};K(t,H.loadingClass);if(f){clearTimeout(c);c=I(x,2500);V(t,L,true)}if(o){G.call(l.getElementsByTagName("source"),F)}if(s){t.setAttribute("srcset",s)}else if(n&&!o){if(d.test(t.nodeName)){T(t,n)}else{t.src=n}}if(r&&(s||o)){Y(t,{src:n})}}if(t._lazyRace){delete t._lazyRace}Q(t,H.lazyClass);ee(function(){var e=t.complete&&t.naturalWidth>1;if(!f||e){if(e){K(t,"ls-is-cached")}B(u);t._lazyCache=true;I(function(){if("_lazyCache"in t){delete t._lazyCache}},9)}if(t.loading=="lazy"){N--}},true)});var R=function(e){if(e._lazyRace){return}var t;var i=n.test(e.nodeName);var a=i&&(e[$](H.sizesAttr)||e[$]("sizes"));var r=a=="auto";if((r||!m)&&i&&(e[$]("src")||e.srcset)&&!e.complete&&!J(e,H.errorClass)&&J(e,H.lazyClass)){return}t=X(e,"lazyunveilread").detail;if(r){re.updateElem(e,true,e.offsetWidth)}e._lazyRace=true;N++;s(e,t,r,a,i)};var r=ae(function(){H.loadMode=3;i()});var l=function(){if(H.loadMode==3){H.loadMode=2}r()};var o=function(){if(m){return}if(f.now()-e<999){I(o,999);return}m=true;H.loadMode=3;i();q("scroll",l,true)};return{_:function(){e=f.now();k.elements=D.getElementsByClassName(H.lazyClass);v=D.getElementsByClassName(H.lazyClass+" "+H.preloadClass);q("scroll",i,true);q("resize",i,true);q("pageshow",function(e){if(e.persisted){var t=D.querySelectorAll("."+H.loadingClass);if(t.length&&t.forEach){U(function(){t.forEach(function(e){if(e.complete){R(e)}})})}}});if(u.MutationObserver){new MutationObserver(i).observe(O,{childList:true,subtree:true,attributes:true})}else{O[P]("DOMNodeInserted",i,true);O[P]("DOMAttrModified",i,true);setInterval(i,999)}q("hashchange",i,true);["focus","mouseover","click","load","transitionend","animationend"].forEach(function(e){D[P](e,i,true)});if(/d$|^c/.test(D.readyState)){o()}else{q("load",o);D[P]("DOMContentLoaded",i);I(o,2e4)}if(k.elements.length){t();ee._lsFlush()}else{i()}},checkElems:i,unveil:R,_aLSL:l}}(),re=function(){var i;var n=te(function(e,t,i,a){var r,n,s;e._lazysizesWidth=a;a+="px";e.setAttribute("sizes",a);if(j.test(t.nodeName||"")){r=t.getElementsByTagName("source");for(n=0,s=r.length;n<s;n++){r[n].setAttribute("sizes",a)}}if(!i.detail.dataAttr){Y(e,i.detail)}});var a=function(e,t,i){var a;var r=e.parentNode;if(r){i=s(e,r,i);a=X(e,"lazybeforesizes",{width:i,dataAttr:!!t});if(!a.defaultPrevented){i=a.detail.width;if(i&&i!==e._lazysizesWidth){n(e,r,a,i)}}}};var e=function(){var e;var t=i.length;if(t){e=0;for(;e<t;e++){a(i[e])}}};var t=ae(e);return{_:function(){i=D.getElementsByClassName(H.autosizesClass);q("resize",t)},checkElems:t,updateElem:a}}(),t=function(){if(!t.i&&D.getElementsByClassName){t.i=true;re._();e._()}};return I(function(){H.init&&t()}),k={cfg:H,autoSizer:re,loader:e,init:t,uP:Y,aC:K,rC:Q,hC:J,fire:X,gW:s,rAF:ee}}(e,e.document,Date);e.lazySizes=t,"object"==typeof module&&module.exports&&(module.exports=t)}("undefined"!=typeof window?window:{});</script>

<div id="body-container">
  <script type="text/javascript" async>
(function() {
    let announcementPosition = 1;
    let minAnnouncementPosition = -1;
    let maxAnnouncementPosition = -1;

    const announcementPrevBtn = document.querySelector('#announcement-previous');
    const announcementNextBtn = document.querySelector('#announcement-next');

    function withAnnouncements(callback) {
        const announcements = document.querySelectorAll('#announcement-container .announcement');
        for (let announcement of announcements) {
            callback(announcement);
        }
    }

    function initAnnouncementVars() {
        document.querySelector(':root').style.setProperty('--mobile-announcement-separator-width', '1px');
        withAnnouncements(function(announcement) {
            const pos = parseInt(announcement.getAttribute('data-position'));
            minAnnouncementPosition = minAnnouncementPosition === -1 ? pos : Math.min(minAnnouncementPosition, pos);
            maxAnnouncementPosition = maxAnnouncementPosition === -1 ? pos : Math.max(maxAnnouncementPosition, pos);
        });

        if (document.querySelector('.announcementBarContainer')) {
            document.querySelector(':root').style.setProperty('--body-top-padding', '0');
        }

        if (maxAnnouncementPosition <= 0) {
            document.querySelector(':root').style.setProperty('--body-top-padding', '0');
        }

        sizeToFullWhenOneEntryOnMobile();
    }

    function setAnnouncementPosition(position) {
        if (window.outerWidth >= 890) {
            return; // we do not need to change the position, since we can display everything on desktop.
        }

        // Make the announcement cyclical
        if (minAnnouncementPosition !== -1 && maxAnnouncementPosition !== -1) {
            if (position > maxAnnouncementPosition) {
                position = minAnnouncementPosition; // overflow to the first announcement
            } else if (position < minAnnouncementPosition) {
                position = maxAnnouncementPosition; // underflow to the last announcement
            }
            announcementPosition = position;
        }

        const shownAnnouncements = [];

        let reverseFlex = false; // should only be true when the first and last items are showing

        // Now that the position is valid, apply the transforms
        withAnnouncements(function(announcement) {
            const pos = parseInt(announcement.getAttribute('data-position'));
            const isWrapped = position === maxAnnouncementPosition && pos === minAnnouncementPosition; // showing first + last at same time
            const doesNextQualify = window.outerWidth >= 500 && (pos === position + 1 || isWrapped);

            if (pos === position || doesNextQualify) {
                shownAnnouncements.push(announcement);
            } else {
                announcement.style.display = 'none';
            }

            announcement.style.opacity = 0.0;

            if (isWrapped) {
                reverseFlex = true;
            }
        });

        for (let announcement of shownAnnouncements) {
            announcement.style.display = 'flex';
            announcement.style.opacity = 1.0;
        }

        const announcementContainer = document.querySelector('#announcement-container');
        if (announcementContainer) {
            announcementContainer.style.flexDirection = reverseFlex ? 'row-reverse' : 'row';
        }
    }

    function resetAnnouncements() {
        announcementPosition = 1;
        const announcementContainer = document.querySelector('#announcement-container');
        if (announcementContainer) {
            announcementContainer.style.flexDirection = 'row';
        }
        withAnnouncements(function(announcement) {
            announcement.style.opacity = 1.0;
            announcement.style.display = 'flex';
        });
    }

    function sizeToFullWhenOneEntryOnMobile() {
        if (maxAnnouncementPosition <= 2 && announcementPrevBtn && announcementNextBtn) {
            announcementPrevBtn.style.display = maxAnnouncementPosition === 2 && window.outerWidth < 500 ? 'flex' : 'none';
            announcementNextBtn.style.display = maxAnnouncementPosition === 2 && window.outerWidth < 500 ? 'flex' : 'none';
        }
        if (maxAnnouncementPosition === 1 && window.outerWidth >= 500 && window.outerWidth < 890) {
            document.querySelector(':root').style.setProperty('--mobile-announcement-separator-width', '0');
            document.querySelector('#announcement-container .announcement').style.maxWidth = '100%';
        }
    }

    function resetAnnouncementsOnResize() {
        announcementPosition = 1; // we want to reset the announcement position every resize
        if (window.outerWidth >= 890) { // 4 announcements can be shown (215px * 4) + separator padding
            resetAnnouncements();
        } else { // if we're still on mobile, set the position to normalize things after resize
            setAnnouncementPosition(announcementPosition);
            sizeToFullWhenOneEntryOnMobile();
        }
    }

    window.addEventListener('resize', resetAnnouncementsOnResize);

    initAnnouncementVars();
    setAnnouncementPosition(announcementPosition); // sets the min & max positions as well as initializes transforms

    if (announcementPrevBtn) {
        announcementPrevBtn.onclick = function() {
            setAnnouncementPosition(announcementPosition - 1);
        };
    }

    if (announcementNextBtn) {
        announcementNextBtn.onclick = function() {
            setAnnouncementPosition(announcementPosition + 1);
        };
    }
})();  </script>
  <div id="ftl-home">
    <div class="container-fluid body">

      <div id="div-gpt-ad-1435246566686-0" class="leaderboard-ad mt-1" data-gpt-slot="homepageLeaderboard"></div>

      <div class="container-decoration">
        <div class="title-container">
          <h1 class="title">DZone Spotlight</h1>
          <span class="title-date">Monday, November 20</span>
          <span class="all-links">
            <a href="/list">View All Articles &raquo;</a>
          </span>
        </div>

        <div class="upper-resource-container">
              <div class="lg-resource-container">
        <div class="lg-resource-block article">
            <a class="resource-overlay shine" href="/articles/a-roadmap-to-true-observability">
                <img class="img-responsive thumbnail" src="https://dz2cdn2.dzone.com/thumbnail?fid=17328398&w=900" alt="A Roadmap to True Observability">
                <div class="resource-details">
                    <p class="resource-title">
                        A Roadmap to True Observability
                    </p>
                </div>
            </a>
    <div class="author-block">
        By <span class="article-author" data-goto="/users/4433007/marulka.html">Marija Naumovska</span>
    </div>
                <div class="resource-description">
                    This is an article from DZone's 2023 Observability and Application Performance Trend Report.For more: Read the Report Observability is essential in any modern software development and production environment. It allows teams to better identify areas of improvement, enabling them to make informed decisions about their development processes. Telemetry, being a critical part of observability, refers to the continuous nature of data collection. This data enables organizations to paint a picture of the whole system's health and achieve a higher level of observability and responsiveness in managing their applications. This article will provide some guidance for your observability journey, starting with defining the significance of "true" observability. It will explore the different observability maturity models, examining the steps required to ascend the maturity ladder, as well as the challenges and solutions involved in advancing maturity levels. Additionally, it will cover techniques for adopting observability, including how to get started, best practices for implementing it, and how to generate useful performance data. Lastly, the article will cover the role of automation and AI in observability and how comprehensive telemetry can impact overall application performance. Defining "True" Observability In the domain of application performance management, the term "observability" has evolved beyond its traditional monitoring roots, getting to a level often referred to as "true" observability. At its core, "true" observability is more than just keeping an eye on your systems; it's a holistic approach that provides a 360-degree view of your whole system: infrastructure, applications, and services. Figure 1: Observability pillars Traditional monitoring typically involves a collection of specific performance metrics and predefined thresholds to help better identify known issues and alert administrators when those thresholds are exceeded. It primarily focuses on basic health checks, like system uptime, CPU, and memory utilization, thus providing a simplified view of a system's behavior. This makes traditional monitoring often limited in the ability to diagnose more complex problems or identify underlying causes, as it lacks the depth and data granularity of "true" observability. Traditional monitoring tends to be passive, addressing only well-understood issues, and may not keep pace with the dynamic nature of modern, distributed applications and infrastructure. Moving from traditional monitoring to true observability means incorporating a data-rich approach that relies on in-depth telemetry. Unlike traditional monitoring, which often focuses on surface-level metrics, "true" observability incorporates metrics, traces, and logs, providing a more detailed and nuanced view of application behavior. This helps to identify the root cause of issues, giving teams visibility into the entire ecosystem, and providing a more comprehensive picture of not just what's happening in the system, but why and how it's happening. Ultimately, true observability empowers teams to deliver more reliable, responsive, and efficient applications that elevate the overall user experience. The Observability Maturity Model In order to achieve "true" observability, it's important to understand the Observability Maturity Model. This model outlines the stages through which organizations evolve in their observability practices, acting as a roadmap. Here, we'll describe each maturity stage, highlight their advantages and disadvantages, and offer some practical tips for moving from one stage to the next. As seen in Table 1, the Observability Maturity Model is broken down into four distinct levels of observability: initial, awareness, proactive, and predictive. OBSERVABILITY MATURITY STAGES: ADVANTAGES AND DISADVANTAGES Maturity Stage Purpose Advantages Disadvantages Initial(Stage 1) Also called the monitoring level, this is where the basic health of individual system components is tracked. Alarms and notifications are triggered to signal that something went wrong. Simplicity: easy to implement and understand Quick issue detection Easily accessible through many open-source and SaaS solutions Cost-effective Helps ensure basic availability Limited visibility due to lack of insights into system behavior Reactive issue resolution Lack of context Manual root cause analysis Alert noise from multiple sources Awareness(Stage 2) This is the observability level, where you have more insights into system behavior by observing its outputs. It focuses on results from metrics, logs, and traces, combined with existing monitoring data to help answer what went wrong and why. Offers a deeper and broader understanding of overall system health Helps uncover not just known failure types, but unknown as well Delivers baseline data for investigating issues Complex manual queries for manual data correlation can make troubleshooting inefficient Data from different sources may remain in silos, which is challenging for cross-domain and cross-team collaboration Lack of automation Proactive(Stage 3) This stage provides more comprehensive insights to help understand the problem's origin and consequences. Building upon Stages 1 and 2, it adds the ability to track topology changes over time in the stack and generates extensive, correlated information that helps identify what went wrong quicker, why the issue occurred, when it started, and what areas are impacted. Clear contextual view through unified data Accelerates resolution time through visualization and analysis Automated foundation for root cause analysis and alert correlation Enables visualization of the impact of network, infrastructure, and app events on business services Challenges in data normalization may require additional capabilities or organizational changes Time-consuming setup Still some manual efforts and limited automation at this level Predictive(Stage 4) This is called the intelligent observability phase, as the usage of AI/ML algorithms helps identify error correlation patterns and offers remediation workflows. Here you start understanding how to predict anomalies and automate response. Leveraging AI/ML to analyze large volumes of data for more accurate insights Early issue detection Results in more efficient ITOps Automated responses and self-healing systems May require significant configuration and training Handling the velocity and variety of data can be challenging Demonstrating ROI may take time Potential for misinterpretation in self-healing systems Table 1 Adopting "True" Observability After understanding the Observability Maturity Model, it's essential to explore the multifaceted approach companies must embrace for a successful observability transition. Despite the need to adopt advanced tools and practices, the path to "true" observability can demand significant cultural and organizational shifts. Companies must develop strategies that align with the observability maturity model, nurture a collaborative culture, and make cross-team communication a priority. The rewards are quite substantial — faster issue resolution and improved user experience, making "true" observability a transformative journey for IT businesses. How To Get Started With Observability If your organization is at the beginning of your observability journey, make sure to start by assessing your current monitoring capabilities and identifying gaps. Invest in observability tools and platforms that align with your maturity level, making sure you capture metrics, logs, and traces effectively. Set clear objectives and key performance indicators (KPIs) to measure progress along the way. As you establish a cross-functional observability team and promote a culture of knowledge sharing and collaboration, you'll be well-prepared to move forward in your observability journey. Generating Useful Performance Data Central to this journey is the effective generation of performance data. Telemetry data — metrics, logs, and traces — provide insights into system health and performance. To get started, define what data is most important to your unique system needs. Logging for Clarity and Accessibility Implement structured logging practices that ensure logs are accessible and clear. Logs offer insights into system behavior, errors, and transactions, so it's critical to ensure the consistency of logs in a standardized format. Prioritize log accessibility by implementing log aggregation solutions that centralize logs from multiple sources in the system. This centralized access simplifies troubleshooting and anomaly detection. Metrics for Insights Metrics provide quantifiable data points that encapsulate the critical aspects of your applications, like traffic, latency, error rates, and saturation. Define clear objectives and benchmarks for these metrics, and provide a baseline for performance assessment. Implement monitoring tools that can capture, store, and visualize these metrics in real-time, and analyze them regularly to make data-driven decisions. Tracing to Precision Distributed tracing is a powerful tool for understanding the complex flows in today's modern architectures. To implement effective tracing, start by generating trace data in your applications. Ensure these traces are correlated, providing a detailed view of request paths and interactions between services. Invest in tracing tools that can visualize these traces and offer solutions for root cause analysis. This can help pinpoint performance bottlenecks, troubleshoot quickly, and maintain a precise understanding of your system. The Role of Automation and AI On the journey to "true" observability, automation and AI become your allies in harnessing the full potential of the data you've collected. They offer capabilities that can elevate your observability game to the next level. Using automation, you can streamline the process of generating insights from the data, and detect patterns and anomalies with AI-driven algorithms. Figure 2: AI at the heart of observability Using automation and AI, you can analyze telemetry data to identify deviations from expectations. They can recognize early warning signals and predict performance degradation. AI algorithms can sift through vast amounts of data, identify causes, and provide actionable insights to your operators. AI-driven observability doesn't stop at identification and analysis but can extend to intelligent remediation. When an issue is detected, AI can help provide the instructions for resolution and suggest actions to be taken or changes to be implemented in the system. With AI's assistance, your Ops team can be more efficient and effective, ensuring minimal disruption and optimal system availability. Conclusion In the evolving landscape of IT and application performance management, true observability is a guide through the complexities of modern systems. As environments become more dynamic, distributed, and modular, adopting true observability is a necessity, rather than a luxury. This article uncovered the layers of observability, from understanding the foundations of monitoring to achieving proactive observability with automation and AI. We explored the significance of each maturity level, highlighting the need for cultural and organizational shifts, and we emphasized the benefits of faster issue resolution and an improved user experience. Lastly, we covered the way to adopt "true" observability and the components of a telemetry ecosystem: metrics, traces, and logs, as well as the role of automation and AI for more effective collection, storage, and analysis of the telemetry data. Moving forward, the key takeaway is that the goal of true observability isn't just to collect data; it's to harness its power to deliver seamless and reliable user experiences. To continue your exploration into this subject, consider the following resources: The Observability Maturity Model Refcard by Lodewijk Bogaards The Getting Started With OpenTelemetry Refcard by Joana Carvalho "A Deep Dive Into AIOps and MLOps" by Hicham Bouissoumer and Nicolas Giron This is an article from DZone's 2023 Observability and Application Performance Trend Report.For more: Read the Report
                </div>
        </div>
        <div class="lg-resource-block article">
            <a class="resource-overlay shine" href="/articles/the-resurrection-of-virtual-threads-unraveling-the">
                <img class="img-responsive thumbnail" src="https://dz2cdn1.dzone.com/thumbnail?fid=17325470&w=900" alt="The Resurrection of Virtual Threads: Unraveling Their Journey From JDK 1.1 to JDK 21">
                <div class="resource-details">
                    <p class="resource-title">
                        The Resurrection of Virtual Threads: Unraveling Their Journey From JDK 1.1 to JDK 21
                    </p>
                </div>
            </a>
    <div class="author-block">
        By <span class="article-author" data-goto="/users/2762271/roopakushtagi.html">Roopa Kushtagi</span>
    </div>
                <div class="resource-description">
                    A few months ago, I penned an article discussing the debut of virtual threads in JDK 21 and their role in enabling the thread-per-request pattern. You can access the full article here. During my interactions with the readers, I uncovered an intriguing historical tidbit: virtual threads had been introduced previously, way back in the days of JDK 1, only to be subsequently phased out. To be candid, this was news to me, given my Java journey began in the early 2000s. My curiosity piqued, and I embarked on a quest for insights into the initial introduction and subsequent discontinuation of virtual threads, leading to their remarkable resurgence in JDK 21. In this article, I will reveal the insights I unearthed during my quest. Green threads, also known as virtual threads or user-level threads, were originally used in early versions of Java, including JDK 1.0, for concurrency. These threads are managed by a user-level library or runtime system rather than the underlying operating system. They were designed to provide a lightweight way of achieving concurrency without relying on the operating system's native threads. However, there were several reasons why green threads were dropped after JDK 1.0 in favor of native threads: Platform independence: Java's "write once, run anywhere" promise was challenging to uphold with green threads. Green threads were highly dependent on the underlying runtime system, making it difficult to maintain platform independence. Limited concurrency: Green threads were not well-suited for applications that required true parallelism, especially on multi-core processors. They couldn't take full advantage of the available hardware resources. Scalability: Green threads could not fully leverage modern hardware, as they relied on a single process to handle all threads. Native threads or platform threads, on the other hand, can be distributed across multiple processes. Blocking I/O: Green threads couldn't efficiently handle blocking I/O operations. When a green thread blocked on I/O, it would often block all other threads in the process, causing poor performance. Portability: Applications using green threads could behave differently on different platforms, making it challenging to ensure consistent behavior across various systems. Operating system support: As Java evolved, the use of native threads became more practical due to improvements in operating system support for multithreading. Native threads offered better performance and compatibility with modern systems. Due to these limitations, Java shifted towards using native threads to improve performance, scalability, and portability. This change resulted in better support for concurrent and parallel programming, making Java more suitable for a wider range of applications and systems. In JDK 21, Java introduced a new concurrency model based on virtual threads, which can be seen as a reimagined version of green threads. These virtual threads aim to address some of the challenges that green threads faced in earlier versions of Java. While they share similarities with green threads, they are designed with modern solutions in mind. Here's how they address the challenges mentioned: Platform independence: Virtual threads maintain platform independence. They are integrated into the Java platform itself and do not rely on external user-level libraries. This ensures that the "write once, run anywhere" principle is upheld. Limited concurrency: Virtual threads can provide more concurrency than green threads. They are designed to take advantage of modern multi-core processors, allowing for better parallelism and performance. Scalability: Virtual threads can be efficiently scheduled across multiple processors and cores, making them suitable for modern hardware with high scalability. Blocking I/O: Virtual threads can efficiently handle blocking I/O operations. When a virtual thread blocks on I/O, it is automatically suspended without affecting the execution of other virtual threads. This improves performance in applications with I/O-bound tasks. Portability: The behavior of virtual threads is consistent across different platforms, ensuring that applications using virtual threads will have predictable and reliable performance. Operating system support: JDK 21 is designed to work with native threads when necessary, ensuring good compatibility with modern operating systems. It strikes a balance between virtual threads and native threads to optimize performance and resource utilization. While virtual threads draw inspiration from green threads, they are not a complete reversion to the old green thread model. Instead, they combine the best aspects of both green threads and native threads to provide a more versatile and efficient concurrency model. This approach allows Java to better adapt to contemporary hardware and address the challenges that green threads faced in earlier versions of the language.
                </div>
        </div>
              </div>

              <div class="middle-container">
                    <div class="middle-left-assets">
        <div class="md-resource-block trendreport">
            <div class="md-resource-details">
                <p><a id="title-3" class="title link-hover-underline" href="/trendreports/observability-and-application-performance">Trend Report</a></p>
                <p class="subtitle" data-title-hover="#title-3">Observability and Application Performance</p>
                    <p class="description">Making data-driven decisions, as well as business-critical and technical considerations, first comes down to the accuracy, depth, and usability of the data itself. To build the most performant and resilient applications, teams must stretch beyond monitoring into the world of data, telemetry, and observability. And as a result, you'll gain a far deeper understanding of system performance, enabling you to tackle key challenges that arise from the distributed, modular, and complex nature of modern technical environments.Today, and moving into the future, it's no longer about monitoring logs, metrics, and traces alone — instead, it’s more deeply rooted in a performance-centric team culture, end-to-end monitoring and observability, and the thoughtful usage of data analytics.In DZone's 2023 Observability and Application Performance Trend Report, we delve into emerging trends, covering everything from site reliability and app performance monitoring to observability maturity and AIOps, in our original research. Readers will also find insights from members of the DZone Community, who cover a selection of hand-picked topics, including the benefits and challenges of managing modern application performance, distributed cloud architecture considerations and design patterns for resiliency, observability vs. monitoring and how to practice both effectively, SRE team scalability, and more.</p>
                    <button class="btn-primary asset-dl-btn" onclick="window.location='/storage/assets/17325724-dz-tr-performance-2023.pdf'">
                        <i class="icon-download"></i>
                        Download
                    </button>
            </div>
            <img src="https://dz2cdn3.dzone.com/thumbnail?fid=17327693&w=660" data-title-hover="#title-3" alt="Observability and Application Performance">
        </div>
                    </div>
                    <div class="middle-right-assets">
        <div class="md-resource-block refcard">
            <div class="md-resource-details">
                <p><a id="title-4" class="title link-hover-underline" href="/refcardz/identity-and-access-management-2">Refcard #341</a></p>
                <p class="subtitle" data-title-hover="#title-4">Identity and Access Management</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/2926965/agiannakidis.html">Apostolos Giannakidis</span>
    </div>
                    <button class="btn-primary asset-dl-btn" onclick="window.location='/storage/assets/17234637-sponsored-dz-refcard-341-iam-2023.pdf'">
                        <i class="icon-download"></i>
                        Download
                    </button>
            </div>
            <img src="https://dz2cdn3.dzone.com/thumbnail?fid=17234630&w=660" data-title-hover="#title-4" alt="Identity and Access Management">
        </div>
        <div class="md-resource-block refcard">
            <div class="md-resource-details">
                <p><a id="title-5" class="title link-hover-underline" href="/refcardz/essential-postgresql">Refcard #071</a></p>
                <p class="subtitle" data-title-hover="#title-5">Core PostgreSQL</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/3474598/dbakevlar.html">Kellyn Gorman</span>
            <span class="disable-select icon-core">
                <img width="18" height="18" alt="DZone Core" src="https://dz2cdn1.dzone.com/themes/dz20/images/dz-core-icon.png" style="margin: 0 0 3px 2px" />
                CORE
            </span>
    </div>
                    <button class="btn-primary asset-dl-btn" onclick="window.location='/storage/assets/17198516-sponsored-dz-refcard-071-core-postgresql-2023.pdf'">
                        <i class="icon-download"></i>
                        Download
                    </button>
            </div>
            <img src="https://dz2cdn1.dzone.com/thumbnail?fid=17198497&w=660" data-title-hover="#title-5" alt="Core PostgreSQL">
        </div>
                    </div>
              </div>
        </div>

            <h2 class="bottom-heading">More Articles</h2>
            <div class="article-container">
    <div class="sm-resource-block article">
        <div class="sm-resource-block-container">
            <div class="sm-resource-block-left">
                <div class="ribbon-container">
                    <img data-title-hover="#title-6" class="img-responsive thumbnail" src="https://dz2cdn2.dzone.com/thumbnail?fid=17306875&w=660" alt="AWS Partition Projections: Enhancing Athena Query Performance"
                         onerror="this.src='https://dz2cdn3.dzone.com/themes/dz20/images/question-mark-icon.png'; this.style.padding='4px';">
                </div>
            </div>
            <div class="sm-resource-block-right">
                    <a id="title-6" class="title link-hover-underline" href="/articles/aws-partition-projections">AWS Partition Projections: Enhancing Athena Query Performance</a>
                        <p class="article-desc">In today's data-driven landscape, organizations are increasingly turning to robust solutions like AWS Data Lake to centralize vast amounts of structured and unstructured data. AWS Data Lake, a scalable and secure repository, allows businesses to store data in its native format, facilitating diverse analytics and machine learning tasks. One of the popular tools to query this vast reservoir of information is Amazon Athena, a serverless, interactive query service that makes it easy to analyze data directly in Amazon S3 using standard SQL. However, as the volume of data grows exponentially, performance challenges can emerge. Large datasets, complex queries, and suboptimal table structures can lead to increased query times and costs, potentially undermining the very benefits that these solutions promise. This article delves specifically into the details of how to harness the power of partition projections to address these performance challenges. Before diving into the advanced concept of partition projections in Athena, it's essential to grasp the foundational idea of partitions, especially in the context of a data lake. What Are Partitions in AWS Data Lake? In the realm of data storage and retrieval, a partition refers to a division of a table's data based on the values of one or more columns. Think of it as organizing a vast bookshelf (your data) into different sections (partitions) based on genres (column values). By doing so, when you're looking for a specific type of book (data), you only need to search in the relevant section (partition) rather than the entire bookshelf. In a data lake, partitions are typically directories that contain data files. Each directory corresponds to a specific value or range of values from the partitioning column(s). Why Are Partitions Important? Efficiency: Without partitions, querying vast datasets would involve scanning every single file, which is both time-consuming and costly. With partitions, only the relevant directories are scanned, significantly reducing the amount of data processed. Cost Savings: In cloud environments like AWS, where you pay for the amount of data scanned, partitions can lead to substantial cost reductions. Scalability: As data grows, so does the importance of partitions. They ensure that even as your data lake swells with more data, retrieval times remain manageable. Challenges With Partitions While partitions offer numerous benefits, they aren't without challenges: Maintenance: As new data comes in, new partitions might need to be created, and existing ones might need updates. Optimal Partitioning: Too few partitions can mean you're still scanning a lot of unnecessary data. Conversely, too many partitions can lead to a large number of small files, which can also degrade performance. With this foundational understanding of partitions in a data lake, we can now delve deeper into the concept of partition projections in Athena and how they aim to address some of these challenges. What Are Partition Projections? Partition pruning is a technique where only the relevant metadata, specific to a query, is selected, eliminating unnecessary data. This method often makes queries run faster. Athena employs this strategy for all tables that have partitioned columns. In a typical scenario, when Athena processes queries, it first communicates with the AWS Glue Data Catalog by making a GetPartitions request, after which it performs partition pruning. However, if a table has an extensive set of partitions, this call can slow things down. To avoid this expensive operation on a highly partitioned table, AWS has introduced the technique of partition projections. With partition projection, Athena doesn't need to make the GetPartitions call. Instead, the configuration provided in partition projection equips Athena with all it needs to create the partitions on its own. Benefits of Partition Projections Improved Query Performance: By reducing the amount of data scanned, queries run faster and more efficiently. Reduced Costs: With Athena, you pay for the data you scan. By scanning less data, costs are minimized. Simplified Data Management: Virtual partitions eliminate the need for continuous partition maintenance tasks, such as adding new partitions when new data arrives. Setting Up Partition Projections To utilize partition projections: 1. Define Projection Types: Athena supports several projection types, including `integer,` `enum,` `date,` and `injected.` Each type serves a specific use case, like generating a range of integers or dates. 2. Specify Projection Configuration: This involves defining the rules and patterns for your projections. For instance, for a date projection, you'd specify the start date, end date, and the date format. 3. Modify Table Properties: Once projections are defined, modify your table properties in Athena to use these projections. An Example Use-Case Let us take an example where our data is stored in the data lake and is partitioned by customer_id and dt. The data is stored in parquet format, which is a columnar data format. s3://my-bucket/data/customer_id/yyyy-MM-dd/*.parquet In our example, let us have data for one year, i.e., 365 days and 100 customers. This would result in 365*100=36500 partitions on the data-lake. Let us benchmark the queries on this table with and without partition projections enabled. Let us get the count of all the records for the entire year for five customers. Query SQL SELECT count(*) FROM "analytic_test"."customer_events" where dt &gt;= '2022-01-01' and customer_id IN ('Customer_001', 'Customer_002', 'Customer_003', 'Customer_004', 'Customer_005') Without Partition Projection Without partition projections enabled, the total query runtime is 7.3 seconds. Out of that, it spends 78% in planning and 20% executing the query. Query Results Planning: 78% = 5.6 secondsExecution 20% = 1.46 With Partition Projections Now, let us enable partition projection for this table. Take a look at all the table properties that are suffixed with "partition.*". In this example, since we had two partitions, dt and cutsomer_id. We will use date type projection, and for customer_id, we will use enum type projection. For enum types, you can build an automation job to update the table property whenever there are newer records for it. SQL CREATE EXTERNAL TABLE `customer_events`( `event_id` bigint COMMENT '', `event_text` string COMMENT '') PARTITIONED BY ( `customer_id` string COMMENT '', `dt` string COMMENT '') ROW FORMAT SERDE 'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe' STORED AS INPUTFORMAT 'org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat' LOCATION 's3://my-bucket/data/events.customer_events' TBLPROPERTIES ( 'has_encrypted_data'='false', 'parquet.compression'='SNAPPY', 'transient_lastDdlTime'='1698737433', 'projection.enabled'='true', 'projection.dt.type'='date', 'projection.dt.range'='NOW-1YEARS,NOW', 'projection.dt.format'='yyyy-MM-dd', 'projection.dt.interval'='1', 'projection.dt.interval.unit'='DAYS', 'projection.customer_id.type'='enum', 'projection.customer_id.values'='Customer_001,Customer_002,Customer_003,Customer_004,Customer_005,Customer_006,Customer_007,Customer_008,Customer_009,Customer_010,Customer_011,Customer_012,Customer_013,Customer_014,Customer_015,Customer_016,Customer_017,Customer_018,Customer_019,Customer_020,Customer_021,Customer_022,Customer_023,Customer_024,Customer_025,Customer_026,Customer_027,Customer_028,Customer_029,Customer_030,Customer_031,Customer_032,Customer_033,Customer_034,Customer_035,Customer_036,Customer_037,Customer_038,Customer_039,Customer_040,Customer_041,Customer_042,Customer_043,Customer_044,Customer_045,Customer_046,Customer_047,Customer_048,Customer_049,Customer_050,Customer_051,Customer_052,Customer_053,Customer_054,Customer_055,Customer_056,Customer_057,Customer_058,Customer_059,Customer_060,Customer_061,Customer_062,Customer_063,Customer_064,Customer_065,Customer_066,Customer_067,Customer_068,Customer_069,Customer_070,Customer_071,Customer_072,Customer_073,Customer_074,Customer_075,Customer_076,Customer_077,Customer_078,Customer_079,Customer_080,Customer_081,Customer_082,Customer_083,Customer_084,Customer_085,Customer_086,Customer_087,Customer_088,Customer_089,Customer_090,Customer_091,Customer_092,Customer_093,Customer_094,Customer_095,Customer_096,Customer_097,Customer_098,Customer_099,Customer_100') Query results Planning: 1.69 secondsExecution: 0.6 seconds Results We can see a roughly 70% improvement in the query performance. This is because Athena avoids a remote call to AWS glue to fetch the partitions, as with this feature, it is able to project the values for these partitions. Limitations and Considerations While powerful, partition projections do not solve all the problems. Complex Setups: Setting up projections requires a deep understanding of your data and the patterns it follows. Not Always the Best Fit: For datasets that don't follow predictable patterns or have irregular updates, traditional partitioning might be more suitable. Conclusion AWS's introduction of Partition Projections in Athena is a testament to their commitment to improving user experience and efficiency. By leveraging this feature, organizations can achieve faster query performance with minimal configuration changes. As with all tools, understanding its strengths and limitations is key to harnessing its full potential.</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/5000122/mandarkhoje.html">Mandar Khoje</span>
    </div>
            </div>
        </div>
    </div>
    <div class="sm-resource-block article">
        <div class="sm-resource-block-container">
            <div class="sm-resource-block-left">
                <div class="ribbon-container">
                    <img data-title-hover="#title-7" class="img-responsive thumbnail" src="https://dz2cdn2.dzone.com/thumbnail?fid=17323614&w=660" alt="REST API Microservice AI Design and Spreadsheet Rules"
                         onerror="this.src='https://dz2cdn1.dzone.com/themes/dz20/images/question-mark-icon.png'; this.style.padding='4px';">
                </div>
            </div>
            <div class="sm-resource-block-right">
                    <a id="title-7" class="title link-hover-underline" href="/articles/rest-api-microservice-spreadsheet-rules">REST API Microservice AI Design and Spreadsheet Rules</a>
                        <p class="article-desc">Let's use ChatGPT to build a REST API Microservice for a budgeting application. This needs to support multi-tenant security and include actual spending matched against budget categories. Of course, a Google sheet or Excel would be the simple answer. However, I wanted a multi-user cloud solution and to use the new open-source REST API microservice platform API Logic Server (ALS). Our microservice needs an SQL database, an ORM, a server, REST API, react-admin UI, and a docker container. AI Design of the Data Model I started by asking ChatGPT 3.5 to generate a budget application data model. Markdown ## Create MySQL tables to do a budgeting application with sample account data This gave me the basic starting point with a budget, category, user, transaction (for actual spending), and account tables. However, we need to translate the spreadsheet model to a database design with rules to handle the sums, counts, and formulas. I started with the SQL group and asked ChatGPT to add new tables for CategoryTotal, MonthTotal, and YearTotal. I renamed the tables and added a flag on the category table to separate expenses from income budget items. MySQL -- Month Total select month_id, count(*), sum(amount) as 'Budget Amount', sum(actual_amount) from budget where user_id = 1 and year_id = 2023 group by year_id, month_id -- Category Total select category_id, count(*), sum(amount) as 'Budget Amount', sum(actual_amount) from budget where user_id = 1 and year_id = 2023 group by year_id, category_id API Logic Server I installed Python and API Logic Server (an open-source Python microservice platform) and used the command line interface to connect to the MySQL database. This created a SQLAlchemy model, a react-admin UI, and an OpenAPI (Swagger). Command Line To Create a New Project Install ALS, create the sample project, and start VSCode (press F5 to run). Shell $python -m venv venv; venv\Scripts\activate # win $python3 -m venv venv; . venv/bin/activate # mac/linux $python -m pip install ApiLogicServer Collecting ApiLogicServer Downloading ApiLogicServer-9.5.0-py3-none-any.whl (11.2 MB) ━━━━━━━━━━━━━━━━━━╸━━━━━━━━━━━━━━━━━━━━━ 5.3/11.2 MB 269.0 kB/s eta 0:00:23 .... truncated .... $ApiLogicServer create --project_name=BudgetApp --db_url=BudgetApp $cd BudgetApp $code . SQLAlchemy Model Api Logic Server created a SQLAlchemy class definition for each table. This shows the Budget entity (table: budget), columns, and relationships. If the database model changes, this can easily be regenerated as part of the development lifecycle process. Python class Budget(SAFRSBase, Base): __tablename__ = 'budget' _s_collection_name = 'Budget' # type: ignore __bind_key__ = 'None' __table_args__ = ( ForeignKeyConstraint(['year_id', 'category_id', 'user_id'], ['category_total.year_id', 'category_total.category_id', 'category_total.user_id'], ondelete='CASCADE'), ForeignKeyConstraint(['year_id', 'month_id', 'user_id'], ['month_total.year_id', 'month_total.month_id', 'month_total.user_id'], ondelete='CASCADE') ) budget_id = Column(Integer, primary_key=True) year_id = Column(Integer, server_default="2023") month_id = Column(Integer, nullable=False) user_id = Column(ForeignKey('tenant_user.user_id'), nullable=False) category_id = Column(ForeignKey('categories.category_id'), nullable=False) description = Column(String(200)) amount : DECIMAL = Column(DECIMAL(10, 2), nullable=False) actual_amount : DECIMAL = Column(DECIMAL(10, 2), server_default="0") variance_amount : DECIMAL = Column(DECIMAL(10, 2), server_default="0") count_transactions = Column(Integer, server_default="0") budget_date = Column(DateTime, server_default=text("CURRENT_TIMESTAMP")) is_expense = Column(Integer, server_default="1") # parent relationships (access parent) category : Mapped["Category"] = relationship(back_populates=("BudgetList")) user : Mapped["TenantUser"] = relationship(back_populates=("BudgetList")) category_total : Mapped["CategoryTotal"] = relationship(back_populates=("BudgetList")) month_total : Mapped["MonthTotal"] = elationship(back_populates=("BudgetList")) # child relationships (access children) TransactionList : Mapped[List["Transaction"]] = relationship(back_populates="budget") OpenAPI Created for Each Table Declarative Rules API Logic Server rules are similar to spreadsheet definitions but derive (and persist) values at the column level when updates are submitted. And like a spreadsheet, the order of operations is determined based on the state dependency of the change. API Logic Server has an open-source rule engine (LogicBank) that monitors updates using SQLAlchemy before the flush event. That means rule invocation is automatic, multi-table, and eliminates an entire class of programming errors (i.e., rules execute for every insert, update, or delete). To aggregate a column, we need a parent table. Note that in a spreadsheet, the column totals are aggregated using a ‘sum’ or ‘count.’ The insert_parent flag allows the child row to create the parent row if it does not exist (using the multiple foreign keys) before doing the aggregations. This feature can do multi-level group-bys for all types of applications (e.g., accounting group by debit/credit for year, month, quarter). While an SQL group-by can yield a similar result, declarative rules adjust and persist the column values during insert, update, or delete. Spreadsheet-like declarative rules are entered using code completion, and examples are shown below: RULE Example Notes Sum Rule.sum(derive=models.MonthTotal.budt_amount, as_sum_of=models.Budget.amount, where=Lambda row: row.year_id == 2023) Derive parent-attribute as sum of designated child attribute; optional child qualification Count Rule.count(derive=models.Budget.transaction_count, as_count_of=models.Transaction,where=Lambda row: row.year_id == 2023) Derive parent-attribute as count of child rows; optional child qualification Formula Rule.formula(derive=models.Budget.variance, as_expression=lambda row: row.actual_amount - row.amount) Lambda function computes column value Constraint Rule.constraint(validate=models.Customer, as_condition=lambda row: row.Balance &lt;= row.CreditLimit, error_msg="balance ({row.Balance}) exceeds credit ({row.CreditLimit})") Boolean lambda function must be True else transaction rolled back with message Copy Rule.copy(derive=models.Transaction.month_id, from_parent=models.Budget.month_id) Child value copied from parent column Event Rule.row_event(on_class=models.Budget, calling=my_function) Python Function call (early eventy, row event, and commit event) Sum Rule These simple declarations will aggregate the budget amount transaction amount and calculate the variance to the CategoryTotal, MonthTotal, and YrTotal tables. Note the flag (insert_parent) will create the parent row if it does not exist before doing the aggregation... The code completion feature makes the rule declarations easy. The rules are optimized and will handle insert updates. Delete by adjusting the values instead of doing an SQL group by formula, sum, or count each time a change is detected. (see logic/declare_logic.py) Python Rule.sum(derive=models.YrTotal.budget_total, as_sum_of=models.CategoryTotal.budget_total,insert_parent=True) Rule.sum(derive=models.CategoryTotal.budget_total, as_sum_of=models.Budget.amount,insert_parent=True) Rule.sum(derive=models.MonthTotal.budget_total, as_sum_of=models.Budget.amount,insert_parent=True) Note: rules are un-ordered and will create a runtime log of the firing sequence based on state dependencies. That makes iterations rapid (no need to review logic to determine where to insert new code) and less error-prone. Create a Custom API In addition to SQLAlchemy Model creation, API Logic Server also creates a restful JSON API for created endpoints. This unblocks UI developers immediately. Here, we create a new custom REST API to POST a batch of actual CSV transactions. While API Logic Server has already created endpoints for API/budget and API/transaction — this is a demonstration of how to extend the REST API. The new endpoints show up in the OpenAPI (Swagger) and allow testing directly. The SQLAlchemy and Flask/safrs JSON API allow a great deal of flexibility to perform complex filters and queries to shape rest APIs’. (see api/customize_api.py) Python class BatchTransactions(safrs.JABase): @classmethod @jsonapi_rpc(http_methods=["POST"]) def csv_transaction_insert(cls, *args, **kwargs): """ # yaml creates Swagger description args : budget_id: 1 amount: 100 category_id: 1 description: 'test transaction insert' """ db = safrs.DB session = db.session # we parse the POST *kwargs to handle multiple transactions - returns JSON # the csv has date, category, and amount for csv_row in get_csv_payload(kwargs): trans = models.Transaction() trans.category_id = lookup_category(csv_row, "category") trans.amount = csv_row.amount trans.transaction_date = csv_row.date session.add(trans) return {"transaction(s) insert done"} @classmethod @jsonapi_rpc(http_methods=["GET"]) def get_budget(cls, *args, **kwargs): ''' Use SQLAlchemy to get budget, category, month, and year total ''' db = safrs.DB # valid only after is initialized, above session = db.session user_id = Security.current_user().user_id budget_list = session.query(models.Budget).filter(models.Budget.year_id == 2023 and models.Budget.user_id == user_id).all() result = [] for row in budget_list: budget_row = (jsonify(row).json)['attributes'] month_total = (jsonify(row.month_total).json)['attributes'] category_total = (jsonify(row.category_total).json)['attributes'] year_total = (jsonify(row.category_total.yr_total).json)['attributes'] result.append({"budget":budget_row, "category_total":category_total, "month_total": month_total, "year_total": year_total}) return jsonify(result) Declarative Security We can initialize the API Logic Server to use a custom secure login, and this will enable declarative security. Security has two parts: authentication (login) and authorization (access). The security/declare_authorization.py file lets us declare a global tenant filter for all roles (except admin or sa). Adding a GlobalFilter will apply an additional where clause to any table that has a column named "user_id." The default role permission applies to the users' role and defines the global access setting. Grants can be applied to a role to further extend or remove access to an endpoint. Python class Roles(): ''' Define Roles here, so can use code completion (Roles.tenant) ''' tenant = "tenant" renter = "renter" admin = "admin" sa = "sa" DefaultRolePermission(to_role=Roles.tenant,can_read=True, can_delete=False) DefaultRolePermission(to_role=Roles.admin,can_read=True, can_delete=True) GlobalFilter(global_filter_attribute_name="user_id", roles_not_filtered = ["sa", "admin"], filter="{entity_class}.user_id == Security.current_user().id") Iterative Development The concept of API lifecycle management is critical. I added a variance column to each table (budget, month_total, category_total, and yr_total) to calculate the difference between the actual_amount minus budget_amount. I changed the SQL database (SQLite) and then asked the API Logic Server command line to rebuild-model-from-database. This will rebuild the database/model.py and the react-dmin UI, while preserving the logic and security we already defined. CLI to rebuild-from-database Shell ApiLogicServer rebuild-from-database --project_name=BudgetApp --db_url=BudgetApp Formula Rules operate at the column (aka field) level to calculate the variance between the budget entry and all the transaction actuals. The variance will be calculated if either the budget or the transaction's actual amounts change. Python Rule.formula(derive=models.Budget.variance_amount, as_expression=lambda row: row.actual_amount - row.amount) Rule.formula(derive=models.CategoryTotal.variance_amount, as_expression=lambda row: row.actual_amount - row.budget_total) Rule.formula(derive=models.MonthTotal.variance_amount, as_expression=lambda row: row.actual_amount - row.budget_total) Rule.formula(derive=models.YrTotal.variance_amount, as_expression=lambda row: row.actual_amount - row.budget_total) Testing The OpenAPI (Swagger) endpoint generates CURL command to test inserting Budget and Transaction entries. Using the react-admin UI to view the YrTotal endpoint to see if the aggregation group-by worked correctly. There are some Behave (TDD) tests that do the same thing. The Open API will generate both a URL and a CURL entry for the API developers and for testing locally. Below is the react-admin UI showing the YrTotal budget, actual, and variance amounts. Example CURL command to post a budget entry: Shell $curl -X 'POST' \ 'http://localhost:5656/api/budget' \ -H 'accept: application/vnd.api+json' \ -H 'Content-Type: application/json' \ -d '{ "meta": "data": { "attributes": { "year_id": 2023, "month_id": 1, "user_id": 1, "category_id": 1, "description": "Budget Test", "amount": amount, }, "type": "Budget" } }' Tracing the Rules The VSCode debug window shows a detailed list of the rules that fired and the rule execution order. More detailed information is available in the logs. Like a spreadsheet, as data value changes are made, the runtime LogicBank will fire the rules in the correct order to adjust the sums, counts, constraints, events, and formulas for months, categories, and year totals. Docker Container The DevOps folder in the API Logic Server has several subfolders to build and deploy this project as a docker container (and an optional NGINX container) locally or to the cloud. This allows me to quickly deploy my application to the cloud for testing and immediate user feedback. Summary Using the open-source API Logic Server with SQLAlchemy, Flask, safs/JSON API, and LogicBank to simulate the spreadsheet rules requires thinking of data as SQL Tables and applying rules accordingly to do the automated group-bys for sums and counts on CategoryTotal for each category, MonthTotal for each column by category, and YrTotal to sum all budget expenses. This is a multi-tenant secure cloud-based application built in a day using ChatGPT and automated microservice generation with declarative, spreadsheet-like rules. The ability to write a custom endpoint to bring back all the budget, category, month, and year totals in a single endpoint gives us, the UI developer, a complete spreadsheet functionality. API Logic Server provides automation for iterative building and deployment of a REST API microservice with declarative logic and security. These declarative rules help turn any SQL database into a spreadsheet.</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/4992943/tylermband.html">Tyler Band</span>
    </div>
            </div>
        </div>
    </div>
    <div class="sm-resource-block article">
        <div class="sm-resource-block-container">
            <div class="sm-resource-block-left">
                <div class="ribbon-container">
                    <img data-title-hover="#title-8" class="img-responsive thumbnail" src="https://dz2cdn4.dzone.com/thumbnail?fid=17322968&w=660" alt="Anatomy of a High Availability Kubernetes Cluster"
                         onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'; this.style.padding='4px';">
                </div>
            </div>
            <div class="sm-resource-block-right">
                    <a id="title-8" class="title link-hover-underline" href="/articles/anatomy-of-a-high-availability-kubernetes-cluster">Anatomy of a High Availability Kubernetes Cluster</a>
                        <p class="article-desc">In my previous article, I hinted at explaining how Ansible can be used to expose applications running inside a high availability K8s cluster to the outside world. This post will show how this can be achieved using a K8s ingress controller and load balancer. This example uses the same setup as last time around: virtual machines running under the default Windows Hypervisor (Hyper-V). To make room for the addition of a proxy each VM had to give up some RAM. With the exception of the initial master and the Ansible runner, each of the remaining nodes received an allocation of 2000MB. A new version of the sample project is available at GitHub with a new playbook called k8s_boot.yml. This yaml boots up the entire cluster instead of having to run multiple playbooks one after the other. It configures the cluster according to the specification of the inventory file. The flow of execution can be better, but I changed the underlying copybooks as little as possible so readers of previous posts can still find their way. Since the architecture of this post might seem complex at first encounter, an architectural diagram is included towards the very bottom to clarify the landscape. Master and Commanders In the previous article I alluded to the fact that a high availability cluster requires multiple co-masters to provide backup should the current master act up. We will start off by investigating how this redundancy is used to establish high availability. The moment a co-master loses comms with the master, it nominates itself to become the next master. Each of the remaining masters then has to acknowledge its claim upon receiving news of its candidacy. However, another co-master can also notice the absence of the current master before receiving word of a candidacy and nominating itself. Should 50% of the vote be the requirement to assume control, it is possible for two control planes to each attract 50% and think itself the master. Such a cluster will go split-brained with two masters orchestrating a bunch of very confused worker nodes. For this reason, K8s implements the raft protocol from, which follows the typical requirement that a candidate should receive a quorum of 50%+1 before it gains the respect to boss all and sundry. Consequently, a high availability K8s cluster should always comprise of an unequal number of masters. For the project, this means that the inventory should always contain an equal number of co-masters, with the initial master then assuring the inequality. The bootup playbook imports the older k8s_comasters.yml playbook into its execution to prepare and execute the well-known "kubeadm join" command on each of the co-masters: kubeadm join k8scp:6443 --token 9ei28c.b496t8c4vbjea94h --discovery-token-ca-cert-hash sha256:3ae7abefa454d33e9339050bb26dcf3a31dc82f84ab91b2b40e3649cbf244076 --control-plane --certificate-key 5d89284dee1717d0eff2b987f090421fb6b077c07cf21691089a369781038c7b Joining workers nodes to the cluster uses a similar join command but omits the --control-plane switch, as can be seen in k8s_workers.yml, also imported during bootup. After running the bootup playbook, the cluster will comprise both control-plane and worker nodes: Control At All Times At this point in time, all nodes refer to the original master by hostname, as can be seen from the "kube init" command that starts the first master: kubeadm init --pod-network-cidr 10.244.0.0/16 --control-plane-endpoint k8scp:6443 --upload-certs Clearly, this node is currently the single point of failure of the cluster. Should it fall away, the cluster's nodes will lose contact with each other. The Ansible scripts mitigate for this by installing the kube config to all masters so kubectl commands can be run from any master by such designated user. Changing the DNS entry to map k8scp to one of the other control planes will hence restore service. While this is easy to do using the host file, additional complexities can arise when using proper DNS servers. Kubernetes orthodoxy, consequently, has that a load balancer should be put in front of the cluster to spread traffic across each of the master nodes. A control plane that falls out will be removed from the duty roster by the proxy. None will be the wiser. HAProxy fulfills this role perfectly. The Ansible tasks that make this happen are: - name: Install HAProxy become: true ansible.builtin.apt: name: haproxy=2.0.31-0ubuntu0.2 state: present - name: Replace line in haproxy.cfg1. become: true lineinfile: dest: /etc/haproxy/haproxy.cfg regexp: 'httplog' line: " option tcplog" - name: Replace line in haproxy.cfg2. become: true lineinfile: dest: /etc/haproxy/haproxy.cfg regexp: 'mode' line: " mode tcp" - name: Add block to haproxy.cfg1 become: true ansible.builtin.blockinfile: backup: false path: /etc/haproxy/haproxy.cfg block: |- frontend proxynode bind *:80 bind *:6443 stats uri /proxystats default_backend k8sServers backend k8sServers balance roundrobin server cp {<!-- -->{ hostvars['host1']['ansible_host'] }:6443 check {% for item in comaster_names -%} server {<!-- -->{ item } {<!-- -->{ hostvars[ item ]['ansible_host'] }:6443 check {% endfor -%} listen stats bind :9999 mode http stats enable stats hide-version stats uri /stats - name: (Re)Start HAProxy service become: true ansible.builtin.service: name: haproxy enabled: true state: restarted The execution of this series of tasks is triggered by the addition of a dedicated server to host HAProxy to the inventory file. Apart from installing and registering HAProxy as a system daemon, this snippet ensures that all control-plane endpoints are added to the duty roster. Not shown here is that the DNS name (k8scp) used in the "kubeadm join" command above is mapped to the IP address of the HAProxy during bootup. Availability and Accessibility Up to this point, everything we have seen constitutes the overhead required for high-availability orchestration. All that remains is to do a business Deployment and expose a K8s service to track its pods on whichever node they may be scheduled on: kubectl create deployment demo --image=httpd --port=80 kubectl expose deployment demo Let us scale this deployment to two pods, each running an instance of the Apache web server: This two-pod deployment is fronted by the demo Service. The other Service (kubernetes) is automatically created and allows access to the API server of the control plane. In a previous DZone article, I explained how this API can be used for service discovery. Both services are of type ClusterIP. This is a type of load balancer, but its backing httpd pods will only be accessible from within the cluster, as can be seen from the absence of an external ip. Kubernetes provides various other service types, such as NodePort and LoadBalancer, to open up pods and containers for outside access. A NodePort opens up access to the service on each Node. Although it is possible for clients to juggle IP addresses should a node fall out, the better way is to use a LoadBalancer. Unfortunately, Kubernetes does not provide an instance as it is typically provided by cloud providers. Similarly, an on-premise or bare-metal cluster has to find and run its own one. Alternatively, its clients have to make do as best they can by using NodePorts or implementing its own discovery mechanism. We will follow the first approach by using MetalLB to slot K8s load balancing into our high availability cluster. This is a good solution, but it is not the best solution. Since every K8s deployment will be exposed behind its own LoadBalancer/Service, clients calling multiple services within the same cluster will have to register the details of multiple load balancers. Kubernetes provides the Ingress API type to counter this. It enables clients to request service using the HTTP(S) routing rules of the Ingress, much the way a proxy does it. Enough theory! It is time to see how Ansible can declare the presence of an Ingress Controller and LoadBalancer: - hosts: masters gather_facts: yes connection: ssh vars_prompt: - name: "metal_lb_range" prompt: "Enter the IP range from which the load balancer IP can be assigned?" private: no default: 192.168.68.200-192.168.69.210 tasks: - name: Installing Nginx Ingress Controller become_user: "{<!-- -->{ ansible_user }" become_method: sudo # become: yes command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.5/deploy/static/provider/cloud/deploy.yaml run_once: true - name: Delete ValidatingWebhookConfiguration become_user: "{<!-- -->{ ansible_user }" become_method: sudo # become: yes command: kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission run_once: true - name: Install Metallb1. become_user: "{<!-- -->{ ansible_user }" become_method: sudo become: yes shell: 'kubectl -n kube-system get configmap kube-proxy -o yaml &gt; /home/{<!-- -->{ ansible_user }/kube-proxy.yml' - name: Install Metallb2. become_user: "{<!-- -->{ ansible_user }" become_method: sudo become: yes command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.11/config/manifests/metallb-native.yaml - name: Prepare L2Advertisement. become_user: "{<!-- -->{ ansible_user }" become_method: sudo copy: dest: "~/l2advertisement.yml" content: | apiVersion: metallb.io/v1beta1 kind: L2Advertisement metadata: name: example namespace: metallb-system - name: Prepare address pool. become_user: "{<!-- -->{ ansible_user }" become_method: sudo copy: dest: "~/address-pool.yml" content: | apiVersion: metallb.io/v1beta1 kind: IPAddressPool metadata: name: first-pool namespace: metallb-system spec: addresses: - {<!-- -->{ metal_lb_range } - pause: seconds=30 - name: Load address pool become_user: "{<!-- -->{ ansible_user }" become_method: sudo command: kubectl apply -f ~/address-pool.yml - name: Load L2Advertisement become_user: "{<!-- -->{ ansible_user }" become_method: sudo command: kubectl apply -f ~/l2advertisement.yml ... First off, it asks for a range of IP addresses that are available for use by the LoadBalancers. It subsequently installs the Nginx Ingress Controller and, lastly, MetallLB to load balance behind the Ingress. MetalLB uses either the ARP (IPv4)/NDP(IPv6) or the BGP to announce the MAC address of the network adaptor. Its pods attract traffic to the network. BGP is probably better as it has multiple MetalLB speaker pods announcing. This might make for a more stable cluster should a node fall out. ARP/NDP only has one speaker attracting traffic. This causes a slight unresponsiveness should the master speaker fail and another speaker has to be elected. ARP is configured above because I do not have access to a router with a known ASN that can be tied into BGP. Next, we prepare to boot the cluster by designating co-masters and an HAProxy instance in the inventory. Lastly, booting with the k8s_boot.yml playbook ensures the cluster topology as declared in the inventory file is enacted: Each node in the cluster has one MetalLB speaker pod responsible for attracting traffic. As stated above, only one will associate one of the available IP addresses with its Mac address when using ARP. The identity of this live wire can be seen at the very bottom of the Ingress Controller service description: Availability in Action We can now test cluster stability. The first thing to do is to install an Ingress: kubectl create ingress demo --class=nginx --rule="www.demo.io/*=demo:80" Browse the URL, and you should see one of the Apache instances returning a page stating: "It works!": This IP address spoofing is pure magic. It routes www.demo.io to the Apache web server without it being defined using a DNS entry outside the cluster. The Ingress can be interrogated from kubectl: One sees that it can be accessed on one of the IP addresses entered during bootup. The same can also be confirmed using wget, the developer tools of any browser worth its salt, or by inspecting the ingress controller: Should the external IP remain in the pending state, Kubernetes could not provision the load balancers. The MetalLB site has a section that explains how to troubleshoot this. We confirmed that the happy case works, but does the web server regain responsiveness in case of failure? We start off by testing whether the IngressController is a single point of failure by switching the node where it ran: Kubernetes realized that the node was no longer in the cluster, terminated all the pods running on that cluster, and rescheduled them on the remaining worker node. This included the IngressController. The website went down for a while, but Kubernetes eventually recovered service. In other words, orchestration in action! Next up, we remove the MetalLB speaker by taking down the cluster where it runs: Another speaker will step up to the task! What about HAProxy? It runs outside the cluster. Surely, this is the single point of failure. Well... Yes and no. Yes, because one loses connection to the control planes: No, because all that is required is to map the IP address of k8scp from that of the HAProxy to that of one of the masters. The project has an admin playbook to do this. Run it and wait for the nodes to stabilize into a ready state. Ingress still routes, MetalLB still attracts, and httpd still serves: Due to the HAProxy being IAC, it is also no trouble to boot a new proxy and slot out the faulty/crashed one. The playbook used above to temporarily switch traffic to a master can also be used during such a proxy replacement. Unfortunately, this requires human interaction, but at least the human knows what to monitor with the utmost care and how to quickly recover the cluster. Final Architecture The final architecture is as follows: Note that all the MetalLB speakers work as a team to provide LoadBalancing for the Kubernetes Services and its Deployments. Conclusion There probably are other ways to install a high availability K8s cluster, but I like this double load balancer approach: HAProxy abstracts and encapsulates the redundancy of an unequal number of control planes, e.g., it ensures 99.9999% availability for cluster controlling commands coming from kubectl; MetalLB and Nginx Ingress Controller working together to track the scheduling of business pods. Keep in mind that the master can move a pod with its container(s) to any worker node depending on failure and resource availability. In other words, the MetalLB LoadBalancer ensures continuity of business logic in case of catastrophic node failure. In our sample, the etcd key-value store is located as part of the control-planes. This is called the stacked approach. The etcd store can also be removed from the control-planes and hosted inside its own nodes for increased stability. More on this here. Our K8s as Ansible project is shaping nicely for use as a local or play cloud. However, a few things are outstanding that one would expect in a cluster of industrial strength: Role based access control (RBAC); Service mesh to move security, observability, and reliability from the application into the platform; Availability zones in different locations, each with its one set of HAProxy, control-planes, and workers separated from each other using a service mesh; Secret management; Ansible lint needs to be run against the Ansible playbooks to identify bad and insecure practices requiring rectification; Choking incoming traffic when a high load of failure is experienced to allow business pods to continue service or recover gracefully. It should be noted, though, that nothing prevents one to add these to one's own cluster.</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/4618064/j-6.html">Jan-Rudolph Bührmann</span>
    </div>
            </div>
        </div>
    </div>
    <div class="sm-resource-block article">
        <div class="sm-resource-block-container">
            <div class="sm-resource-block-left">
                <div class="ribbon-container">
                    <img data-title-hover="#title-9" class="img-responsive thumbnail" src="https://dz2cdn3.dzone.com/thumbnail?fid=17327622&w=660" alt="Performance of ULID and UUID in Postgres Database"
                         onerror="this.src='https://dz2cdn3.dzone.com/themes/dz20/images/question-mark-icon.png'; this.style.padding='4px';">
                </div>
            </div>
            <div class="sm-resource-block-right">
                    <a id="title-9" class="title link-hover-underline" href="/articles/performance-of-ulid-and-uuid-in-postgres-database">Performance of ULID and UUID in Postgres Database</a>
                        <p class="article-desc">Hello everyone! In this article, I want to share my knowledge and opinion about the data types that are often used as an identifier. Today we will touch on two topics at once. These are measurements of search speed by key and data types for the key on the database side. I will use a PostgreSQL database and a demo Java service to compare query speeds. UUID and ULID Why do we need some kind of incomprehensible types for IDs? I won’t talk about distributed systems, connectivity of services, sensitive data, and the like. If someone is interested in this, they can Google it - at the moment we are interested in performance. As the name suggests, we will talk about two types of keys: UUID and ULID. UUID has long been known to everyone, but ULID may be unfamiliar to some. The main advantage of ULID is that it is monotonically increasing and is a sortable type. Naturally, these are not all the differences. Personally, I also like the fact that there are no special characters in it. A small digression, I noticed a long time ago that many teams use the varchar(36) data type to store UUID in the PostgreSQL database and I don’t like this, since this database has a corresponding data type for UUID. A little later, we will see which type is preferable on the database side. Therefore, we will look not only at a comparison of the two data types on the backend side but also at the difference when storing UUID in different formats on the database side. Comparison So let's start comparing things. The UUID is 36 characters long and takes up 128 bits of memory. The ULID is 26 characters long and also takes up 128 bits of memory. For my examples, I created two tables in the database with three fields: SQL CREATE TABLE test.speed_ulid ( id varchar(26) PRIMARY KEY, name varchar(50), created timestamp ); CREATE TABLE test.speed_uuid ( id varchar(36) PRIMARY KEY, name varchar(50), created timestamp ); For the first comparison, I stored the UUID in varchar(36) format, as is often done. In the database, I recorded 1,000,000 in each of the tables. The test case will consist of 100 requests using identifiers previously pulled from the database; that is, when calling the test method, we will access the database 100 times and retrieve the entity by key. The connection will be created and warmed up before measurement. We will conduct two test runs and then 10 effective iterations. For your convenience, I will provide a link to the Java code at the end of the article. Sorry, but the measurements were taken on a standard MacBook Pro laptop and not on a dedicated server, but I don't believe there will be a significant difference in the results other than increased time spent on network traffic between the database and the backend. Here is some background information: # CPU I9-9980HK # CPU count: 16 # RAM: 32GB # JMH version: 1.37 # VM version: JDK 11.0.12, Java HotSpot(TM) 64-Bit Server VM, 11.0.12+8-LTS-237 # DB: PostgreSQL 13.4, build 1914, 64-bit Queries that will be used to obtain an entity by key: SQL SELECT * FROM test.speed_ulid where id = ? SELECT * FROM test.speed_uuid where id = ? Measurement Results Let's look at the measurement results. Let me remind you that each table has 1,000,000 rows. Both Types of Identifiers Are Stored in the Database as varchar I ran this test several times, and the result was about the same: either the ULID was a little faster, or the UUID. In percentage terms, the difference is practically zero. Well, you can disagree that there is no difference between these types. I would say that it is not possible to use other data types on the database side. UUID as uuid, ULID as varchar in DB For the next test, I changed the data type from varchar(36) to uuid in the test.speed_uuid table. In this case, the difference is obvious: 4.5% in favor of UUID. As you can see, it makes sense to use the uuid data type on the database side in the case of a type of the same name on the service side. The index for this format is very well optimized in PostgreSQL and shows good results. Well, now we can definitely part ways. Or not? If you look at the index search query plan, you can see the following ((id)::text = '01HEE5PD6HPWMBNF7ZZRF8CD9R'::text) in the case when we use varchar. In general, comparing two text variables is a rather slow operation, so maybe there is no need to store the ID in this format. Or are there other ways to speed up key comparison? First, let's create another index of the kind “hash” for the table with ULID. SQL create index speed_ulid_id_index on test.speed_ulid using hash (id); Let's look at the execution plan for our query: We will see that the database uses a hash index, and not a btree in this case. Let's run our test and see what happens. varchar + index(hash) for ULID, uuid for UUID This combination gave an increase of 2.3% relative to uuid and its cheating index. I'm not sure that keeping two indexes on one field can somehow be justified. So it's worth considering whether there's more you can do. And here it’s worth looking into the past and remembering how uuid or some other string identifiers used to be stored. That's right: either text or a byte array. So let's try this option: I removed all the indexes for the ULID, cast it to bytea , and recreated the primary key. bytea for ULID, uuid for UUID As a result, we got approximately the same result as in the previous run with an additional index, but I personally like this option better. Measurement result with 2,000,000 rows in the database: Measurement result with 3,000,000 rows in the database: I think there is no point in continuing measurements further. The pattern remains: ULID saved as bytea slightly outperforms UUID saved as uuid in DB. If we take the data from the first measurements, it is obvious that with the help of small manipulations, you can increase performance by about 9% if you use varchar. So, if you have read this far, I assume the article was interesting to you and you have already drawn some conclusions for yourself. It is worth noting that the measurements were made under ideal conditions for both the backend part and the database. We did not have any parallel processes running that write something to the database, change records, or perform complex calculations on the back-end side. Сonclusions Let's go over the material. What did you learn that was useful? Do not neglect the uuid data type on the PostgreSQL side. Perhaps someday extensions for ULID will appear in this database, but for now, we have what we have. Sometimes it is worth creating an additional index of the desired type manually, but there is an overhead to consider. If you are not afraid of unnecessary work - namely, writing your own converters for types - then you should try bytea if there is no corresponding type for your identifier on the database side. What type of data should be used for the primary key and in what format should it be stored? I don’t have a definite answer to these questions: it all depends on many factors. It is also worth noting that a competent choice of data type for ID, and not only for it, can at some point play an important role in your project. I hope this article was useful to you. Good luck! Project on GitHub</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/4867432/just-timtim.html">Artem Artemev</span>
    </div>
            </div>
        </div>
    </div>
    <div class="sm-resource-block article">
        <div class="sm-resource-block-container">
            <div class="sm-resource-block-left">
                <div class="ribbon-container">
                    <img data-title-hover="#title-10" class="img-responsive thumbnail" src="https://dz2cdn1.dzone.com/thumbnail?fid=17323110&w=660" alt="Scatter-Gather Pattern"
                         onerror="this.src='https://dz2cdn4.dzone.com/themes/dz20/images/question-mark-icon.png'; this.style.padding='4px';">
                </div>
            </div>
            <div class="sm-resource-block-right">
                    <a id="title-10" class="title link-hover-underline" href="/articles/scatter-gather-pattern-how-to-write-efficient-code">Scatter-Gather Pattern</a>
                        <p class="article-desc">Have you ever encountered a use case where you need to connect with multiple sources and aggregate their responses into a single response? If yes, then you already have some understanding of scatter-gather. Scatter-gather is an enterprise integration pattern, a design pattern to scale distributed systems or services running on the cloud, or a way to get a solution to the problem — “How to write code to fetch data from N sources?”. The scatter-gather pattern provides guidelines to spread the load in distributed systems or achieve parallelism and reduce the response time of applications handling requests from multiple users. In this article, we’ll investigate this pattern in-depth. I’ll solve one simple problem by applying scatter-gather and later discuss the applicability of this pattern for complex use cases. What Are the Features of the Scatter Gather Pattern? The scatter-gather pattern is applicable when we can divide a big task into smaller, independent sub-tasks that can be executed simultaneously by multiple cores or distributed computing nodes. Independent sub-tasks should be executed asynchronously in a predefined time window. The scatter-gather pattern is hierarchical in nature, and it is useful while designing systems for high scalability deployed in the cloud. Scatter-gather could be enhanced further with messaging patterns using Kafka, RabbitMQ, NATS, or other famous public cloud providers’ messaging services. We’ll understand each feature with a simple example or use case. We'll see how this pattern is useful to solve How To Fetch Data From N Sources Let us take an example to understand the problem where the pattern can be efficient. Our use case is to build an application to list hotel prices. People travel worldwide and want a way to compare hotel prices at a certain location. Here is a high-level design for the requirement. Figure 1: High-level design of hotel price comparison application So, our main requirement is to “Write code to retrieve hotel prices from 3 hotel price listing websites?” We’ll solve this problem for a case where a single service instance is running and serving our clients logged in from mobile Apps or laptops. I am using Java as a programming language to solve this problem. You can use your preferred programming language to solve the problem. Approach 1 Make three serial HTTP calls to Booking, Expedia, and Hotels websites and return prices to the user. These are the steps involved: getHotelPrice() method running on the main thread of our hotels' price comparison service. Whenever a user is calling getHotelPrice() method with the hotel name or ID by an API, our service makes HTTP call to Booking.com and then waits for a response, then 2nd call to Expedia.com and again waiting for a response, and so forth. At last, the service will return aggregated hotel prices from all websites. This is a simple but inefficient approach to solving the problem, as we are wasting CPU resources while waiting for responses from hotel listing websites. Figure 2: Sequential calls to hotel price listing websites Approach 2 Our service makes 3 HTTP calls to Booking.com, Expedia.com, and Hotels.com at the same time and then waits for responses. This is a better solution than approach one as we are utilizing CPU resources effectively, but still, there is an issue. Figure 3: Parallel calls to hotel price listing websites HTTP call is an I/O bound operation, and it is possible that one of the hotel listing websites is not available (due to official downtime or some other error) when our hotels' price comparison service is requesting for hotel price. It’s undesirable to ask the client to wait forever to get hotel prices. Let’s tweak our problem statement to “Write code to retrieve hotel prices from 3 hotel price listing websites, waiting for a maximum of 2 seconds?” By introducing a 2-second wait timeout, our service won’t wait forever for the response from unavailable websites. Our service may return a partial response (ignoring delayed or unavailable responses) after waiting 2 seconds. Please show me some code. There are different ways to solve this problem in Java, e.g., futures/callable, synchronization barrier phaser, and concurrent locks and conditions. I am writing code using CompletableFuture. CompletableFuture represents a future result of an asynchronous operation executed in a different thread. Let's break down our solution: Write a service to list the price of a given hotel from three hotel prices lister platforms: Booking, Expedia, and Hotels. Service should be able to return a partial response when one of the hotel prices lister platforms is unavailable or slow. Step 1: Create an enumeration of HotelsListerPlatform Java public enum HotelsListerPlatform { BOOKING, EXPEDIA, HOTELS } Step 2: Create an interface with the name PriceFetcher. We’ll create three separate classes for Booking, Expedia, and Hotels to implement this interface. Java public interface PriceFetcher { CompletableFuture&lt;Double&gt; fetchHotelPrice(String hotelId); } Step 3: Create a factory to resolve the hotel lister platform name in our HotelsPriceComparisonService class Java public class HotelsListerFactory { private static final Map&lt;HotelsListerPlatform, PriceFetcher&gt; priceFetcherFactory = Map.of( HotelsListerPlatform.BOOKING, new BookingPriceFetcher(), HotelsListerPlatform.EXPEDIA, new ExpediaPriceFetcher(), HotelsListerPlatform.HOTELS, new HotelsPriceFetcher() ); public static PriceFetcher getPriceFetcher(HotelsListerPlatform hotelsListerPlatform) { return priceFetcherFactory.get(hotelsListerPlatform); } } Step 4: Classes implementing the interface (We are introducing an artificial delay in HotelsPriceFetcher class to simulate the slowness of hotels com API) Java public class BookingPriceFetcher implements PriceFetcher { @Override public CompletableFuture&lt;Double&gt; fetchHotelPrice(String hotelId) { return CompletableFuture.supplyAsync(() -&gt; 100.15, CompletableFuture.delayedExecutor(100, TimeUnit.MILLISECONDS)); } } public class ExpediaPriceFetcher implements PriceFetcher { @Override public CompletableFuture&lt;Double&gt; fetchHotelPrice(String hotelId) { return CompletableFuture.supplyAsync(() -&gt; 110.15, CompletableFuture.delayedExecutor(100, TimeUnit.MILLISECONDS)); } } public class HotelsPriceFetcher implements PriceFetcher { @Override public CompletableFuture&lt;Double&gt; fetchHotelPrice(String hotelId) { return CompletableFuture.supplyAsync(() -&gt; { try { // Artificial delay to simulate slow response Thread.sleep(3000); } catch (InterruptedException ex) { ex.printStackTrace(); } return 105.25; }, CompletableFuture.delayedExecutor(100, TimeUnit.MILLISECONDS)); } } Step 5: Create a class to write the business logic of scatter-gather using CompletableFuture and timeout Java public class HotelsPriceComparisonService { public List&lt;Double&gt; fetchHotelPrices(String hotelId, long timeoutInSeconds) { // List of CompletableFuture ready to be called when client need the data List&lt;CompletableFuture&lt;Double&gt;&gt; hotelPricesFutures = Stream.of(HotelsListerPlatform.values()) .map(hotelsListerPlatform -&gt; { PriceFetcher hotelsPriceFetcher = HotelsListerFactory.getPriceFetcher(hotelsListerPlatform); return hotelsPriceFetcher.fetchHotelPrice(hotelId); }) .toList(); try { // Returns a new CompletableFuture that is completed when given list of CompletableFutures complete CompletableFuture.allOf(hotelPricesFutures.toArray(new CompletableFuture[hotelPricesFutures.size()])) .get(timeoutInSeconds, TimeUnit.SECONDS); } catch (Exception ex) { // You may log exception here } // Returns complete or partial (when one of the hotels listing websites is not available) list of prices return hotelPricesFutures .stream() // Get the value from successfully completed future .filter(future -&gt; future.isDone() &amp;&amp; !future.isCompletedExceptionally()) .map(CompletableFuture::join) .toList(); } } Step 6: Write some unit tests to verify our business logic. Java @Test public void shouldReturnResponsesFromAllHotelsListerPlatformWhenTimeoutIsMoreThanSlowestPlatform() { HotelsPriceComparisonService hotelsPriceComparisonService = new HotelsPriceComparisonService(); List&lt;Double&gt; hotelPrices = hotelsPriceComparisonService.fetchHotelPrices("Hyatt", 4); Assertions.assertEquals(hotelPrices, List.of(100.15, 110.15, 105.25)); } @Test public void shouldReturnPartialResponseWhenTimeoutIsMoreThanSlowestPlatform() { HotelsPriceComparisonService hotelsPriceComparisonService = new HotelsPriceComparisonService(); List&lt;Double&gt; hotelPrices = hotelsPriceComparisonService.fetchHotelPrices("Hyatt", 2); Assertions.assertEquals(hotelPrices, List.of(100.15, 110.15)); } Congratulations, you have successfully implemented a simpler version of Scatter-Gather. In real scenarios, problems are not as simple as calling three websites to get hotel prices. Real-world applications are a mix of CPU-bound and I/O-bound tasks where a single process or machine could be a bottleneck due to limited memory, network, or disk bandwidth. Instead of parallelizing an application across multiple cores on a single machine, we can use the scatter-gather pattern to parallelize requests across multiple processes on many different machines. This will ensure that the bottleneck in our process continues to be the CPU since the memory, network, and disk bandwidth are all spread across different machines. Hierarchical Scatter-Gather In the last section, we have implemented the simplest scatter-gather. Let’s assume that our hotel price comparison website is getting popular, and it is successfully handling loads from a small number of users in certain locations. Now, we are planning to expand our business to many users, and with a lot many hotels price lister platforms. We want to expand our business to the USA to help tourists plan their hotel stays while they are on vacations around different states in the USA. The simplest version of the scatter-gather won’t be able to sustain this load, but the hierarchical nature of the scatter-gather will help us to solve this problem. Before delving into this complex scalability problem of our hotel price comparison website, first understand hierarchical scatter-gather with a simple example. Imagine an organization running a set of surveys for all employees. These surveys will provide opportunities for all employees to share 360-degree feedback about the organization's culture and practices. This is a perfect example to demonstrate. The main challenge here is to distribute surveys to all employees and gather back results efficiently. The binary tree data structure can be used to solve this problem. A binary tree node represents an employee. Survey tasks are divided among employees in a full binary tree. Each employee processes their assigned survey tasks. Results are gathered from leaf nodes up to the root of the tree. Java // A recursive method to create binary tree private static WorkerTreeNode createBinaryTree(int depth) { if (depth &lt;= 0) return null; var node = new WorkerTreeNode(new Worker(UUID.randomUUID().toString())); node.setLeft(createBinaryTree(depth - 1)); node.setRight(createBinaryTree(depth - 1)); return node; } // Scatter method to assign list of tasks to employee node in binary tree private static void scatter(List&lt;SurveyTask&gt; tasks, WorkerTreeNode node) { if (node == null) return; tasks.stream().forEach(task -&gt; node.worker.tasks.add(task)); scatter(tasks, node.left); scatter(tasks, node.right); } // Gather method to aggregate results from employee node in binary tree private static List&lt;CompletableFuture&lt;String&gt;&gt; gather(WorkerTreeNode node) { if (node == null) return new ArrayList&lt;&gt;(); var leftResultsTask = gather(node.left); var rightResultsTask = gather(node.right); var results = new ArrayList&lt;CompletableFuture&lt;String&gt;&gt;(); node.worker.tasks.forEach(task -&gt; results.add(node.worker.executeTask(task))); results.addAll(leftResultsTask); results.addAll(rightResultsTask); return results; } public static void main(String[] args) throws ExecutionException, InterruptedException { var surveyTasks = IntStream.rangeClosed(1, 3).mapToObj(i -&gt; new SurveyTask(i, String.format("Data for survey task %d", i))).toList(); //Create a binary tree var root = createBinaryTree(2); //Scatter surveyTasks to workers in the tree scatter(surveyTasks, root); //Gather results from all workers in the tree var gatheredResults = gather(root); var results = CompletableFuture.allOf(gatheredResults.toArray(new CompletableFuture&lt;?&gt;[0])) .thenApply(v -&gt; gatheredResults.stream() .map(CompletableFuture::join) .collect(Collectors.toList()) ).get(); System.out.println(String.join("\n", results)); } The screenshot below shows the output after running scatter and gather phases. As you can see, there are three employees, and each employee is doing three survey tasks, so there are a total of 9 entries in the output. Hierarchical Scatter-Gather To Scale Workloads in Cloud Infrastructure The distribution of tasks using a hierarchical or tree structure is an application of a scatter-gather pattern to scale workloads in a distributed system environment or cloud. In this tree structure, when the root node receives an incoming request from any client, it divides it into multiple independent tasks and assigns them to available leaf nodes, the “scatter” phase. Leaf nodes are multiple machines or containers available on a distributed network. Each leaf node works individually and in parallel on its computation, generating a fraction of the response. Once they have completed their task, each leaf sends its partial response back to the root, which collects them all as part of the “gather” phase. The root node then combines the partial responses and returns the result to the client. The diagram below illustrates it. Figure 4: Hierarchical scatter-gather using Kubernetes pods The strategy enables us to exploit cloud infrastructure to allocate as many virtual machines, compute nodes, or Kubernetes pods as needed and scale horizontally. If a particular leaf node is slow, the root node can also reshuffle the load for a desired response time. Now, we are in a position to solve the scalability problem of our hotel price comparison website by applying hierarchical scatter-gather. Our goal is to launch our website in the USA. To improve the performance of our application, we can divide the USA into New England, Great Lakes, Midwest, Northwest, Southwest, South, and Southeast. When a request arrives, the root node divides it and assigns it to the seven leaf nodes to process in parallel. Each leaf node is responsible for a specific region in the country and returns a list of all hotel prices to that region. Finally, the root node merges all the results to create a final list to show to the customer. There are two major problems with this approach: Slow or non-responsive leaf nodes: Even though our application is using a cloud infrastructure, there is always a likelihood that machines may become unavailable due to network or infrastructure issues (see fallacies of distributed systems). Moreover, our leaf nodes are communicating to external hotel price lister websites that may not respond swiftly. But there is nothing to worry about, as we have solved this problem while implementing the simple version of our problem by comparing prices from three hotels' lister websites. You guessed it right: timeouts, the root node must set an upper limit on the desired response time. If a leaf node does not respond within that time, the root node can ignore it and return a partially collected response from available leaf nodes to the user. Tight coupling between root node and leaf nodes: Our implementation is suffering from runtime tight coupling between root node and leaf nodes where the availability of our hotel price comparison website is impacted by the availability of leaf nodes and third-party hotel price lister websites. A splendid way to eliminate tight runtime coupling is to use message brokers. The message broker acts as an intermediary, holding the message until dependent services are ready to process it. This asynchronous approach allows services to operate independently, breaking the tight coupling that exists in the initial solution, i.e., synchronous https-based communication. Loosely Coupled Hierarchical Scatter-Gather There are two types of messaging concepts that can be implemented between root nodes and leaf nodes to remove runtime-tight coupling. Topic: The topic works on the publish-subscribe model. A single message can be received by many subscribers, i.e., the root node is asking for hotel prices from all leaf nodes distributed across seven regions in the USA. The topic may also store the message so that it can be read later again. Figure 5: Publish Subscribe communication using Topic Queue: Queue works on a point-to-point communication model. Queue sends the message to one consumer only, where messages will be queued until the next available node consumes a message from the queue one at a time. Message in queue is deleted as soon as it is consumed by one consumer node. The queue can work with acknowledgment or without acknowledgment (fire and forget) about the successful consumption of the message. Figure 6: Point to Point communication using Queue Now, we can use these messaging concepts to scale our hotel price comparison application. A combination of topic and queue could help to achieve runtime loose coupling between root and leaf nodes. Whenever there is an incoming request for hotel prices at a certain location, the root node broadcasts messages to the leaf nodes. All working leaf nodes can then subscribe to the incoming message, process it, call external hotel price lister platforms, and publish their hotel price results to a response queue. The root node can consume the results from that queue, aggregate them, and respond to the user. The figure below shows the implementation. Figure 7: Loosely coupled scatter-gather with topic and queue What Is the Right Number for Leaf Nodes? We have come up with a possible solution to scale hotel price comparison application, but there is no silver bullet to solve all problems while designing software systems. Scatter-gather provides a way to parallelize load in several leaf nodes, but increased parallelization comes with a cost, and thus, choosing the right number of leaf nodes is crucial while implementing distributed systems. Nonlinear performance gain: There is an overhead involved while serving HTTP requests from clients, i.e., parsing HTTP requests, processing, and routing messages to topics and queues. This overhead cost is negligible with a small number of leaf nodes, but as parallelization continues and you add more leaf nodes, this overhead eventually dominates the compute cost. So, adding more leaf nodes is not proportional to gaining more performance. Sluggish leaf nodes: the root node waits for the results from all leaf nodes, which means that our application cannot be faster than the slowest leaf node. It is generally known as the “straggler node” problem, and it can substantially delay the overall response time due to a bunch of slow nodes or even a single node. But still, our question is unanswered: what is the right number of leaf nodes? Well, it depends on the commitment towards the end user, i.e., Service Level Agreement (SLA). When our hotel price comparison application makes a promise to be available 96 % (57m 36s allowed downtime per day), then it needs a precise numerical target of availability from dependent systems, and that numerical target is Service Level Objective (SLO). There is a great post from Google about explaining these terms. Example: How many nodes are needed to achieve 96% availability SLA? Let’s assume that we are running our application on a Kubernetes cluster where the cluster’s nodes are hosted in a public cloud provider machine, and 99% availability SLA is guaranteed for these machines. Composite SLA calculation is all about simple Mathematics, e.g., addition, subtraction, multiplication, and probability. In simple terms, to calculate composite availability SLA: - Multiply availability for serial dependencies. Multiply unavailability for parallel dependencies. Composite SLA of our hotel price comparison application = 0.99 * 0.99 * 0.99 * 0.99 * 0.99 = ~0.96, i.e., five leaf nodes are enough to get the desired SLA. Let’s see what happens when we add another leaf node = 0.99 * 0.99 * 0.99 * 0.99 * 0.99 * 0.99 = ~0.95, i.e., adding an extra leaf node is breaching our SLA, and it gets worse when we add more leaf nodes. This calculation proves that adding more machines doesn’t help in improving our promised SLA. Conclusion In this article, we learned about the basics of scatter-gather patterns with a focus on solving one simple use case for a single machine case and later scaled it for a distributed environment. The pattern has several advantages, such as improved performance with parallel processing of tasks, increased fault tolerance by reallocating failed tasks to available nodes, better horizontal scalability, and good resource utilization. There are some disadvantages as well, e.g., complex topology between processing nodes may lead to low latency, incorrect number of leaf nodes may result in sub-optimal performance. Overall, the scatter-gather pattern is a powerful technique for developing high-performing and scalable distributed applications. References Enterprise Integration Patterns SRE Fundamentals Recommendations for defining reliability targets Designing Distributed Systems</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/5014089/parohaabhay.html">Abhay Dutt Paroha</span>
    </div>
            </div>
        </div>
    </div>
    <div class="sm-resource-block article">
        <div class="sm-resource-block-container">
            <div class="sm-resource-block-left">
                <div class="ribbon-container">
                    <img data-title-hover="#title-11" class="img-responsive thumbnail" src="https://dz2cdn1.dzone.com/thumbnail?fid=17316840&w=660" alt="The Role of AI Ethics: Balancing Innovation with Social Responsibility"
                         onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'; this.style.padding='4px';">
                </div>
            </div>
            <div class="sm-resource-block-right">
                    <a id="title-11" class="title link-hover-underline" href="/articles/the-role-of-ai-ethics-balancing-innovation-with-so">The Role of AI Ethics: Balancing Innovation with Social Responsibility</a>
                        <p class="article-desc">Artificial Intelligence (AI) represents a rapidly expanding domain characterized by its swiftly evolving technologies and methodologies. Its transformative potential spans across various sectors of the economy and society. Nonetheless, it’s crucial to acknowledge the ethical dilemmas that AI poses. Companies at the forefront of AI development, alongside businesses, communities, administrations, and individuals incorporating it into their daily lives, must remain mindful of these issues. The Primary Domains of Artificial Intelligence AI can be categorized into various domains, each with unique attributes tailored to achieve specific goals in particular applications. These objectives and applications stem from the technical capabilities and specific challenges inherent in the respective domains, addressing diverse use cases. Machine learning (ML) represents an AI subset that empowers machines to learn autonomously without direct programming. Its extensive application spans across a diverse array of use cases, such as: Medical analysis Customer retention modeling SPAM identification Product suggestion Fraud detection Automotive: Assisted navigation… Deep learning, an extension of machine learning, goes beyond constructing complex hierarchical models through artificial neural networks arranged in layers. These interconnected networks, comprising nodes akin to the human brain, are engineered to identify patterns. Deep learning is instrumental in sophisticated applications, including: Medical analysis Image recognition Voice recognition Language processing Robotics Cybersecurity Bioinformatics … Computer vision is a branch of AI that enables machines to perceive their surroundings, process images, and interpret videos. Its application spans a diverse array of use cases, including object identification, motion sensing, and independent navigation. Conversational artificial intelligence enables machines to communicate and interact with humans in natural language. This technology proves its efficacy in various applications like chatbots, virtual assistants, customer support interfaces, and recommendation systems, to name a few. Robotics enables machines to move and act in the real world, either autonomously or in interaction with humans. Robotics is used in manufacturing, logistics, food processing, machine loading and unloading, and medicine. The Special Case of Generative AI Generative artificial intelligence (Gen AI) is a type of artificial intelligence that generates new data, such as images, text, music, or code. It relies on machine learning algorithms to learn from existing data and generate new data. Despite being an emerging technology, it has experienced impressive achievements since the worldwide release of OpenAI's ChatGPT. Since then, players such as Mistral AI and Hugging Face have appeared on the scene, as have big techs such as Google (Bard AI), Meta (LLaMA), IBM (WatsonX), Salesforce (Einstein GPT), as well as Microsoft, Oracle, and AWS, to name but a few. The fields of application of generative AI are numerous: Content creation: Create images, videos, or music. For example, it can be used to create animated films, video games, or photos. Machine translation: Translate languages more accurately and fluently than traditional methods. Research and development: to generate new ideas and concepts and to test new hypotheses. Improve customer interactions with optimized chat and search functionalities. Explore large amounts of unstructured data via conversational interfaces and summaries, Improve the sales force, for example, by flagging risks, recommending next interactions, or identifying the optimal customer interaction based on conversation history. Identify production errors, anomalies, and defects from images Write code and documentation to speed up and evolve developments Summarize and highlight changes in large volumes of regulatory documents ... Alan Turing vs Sam Altman Generative AI vs. Traditional AI The concepts of traditional AI and generative AI highlight distinct perspectives and consequences in the field of artificial intelligence. Their synergy attests to the ever-changing trajectory and impact of these technological advances. Traditional artificial intelligence, often referred to as narrow or weak AI, focuses on the execution of specific tasks. It refers to systems designed to react to a specific set of inputs. These systems have the ability to learn from data and help make decisions or predictions based on that data. To understand this, let's think of a machine translation system that uses predefined rules to translate texts from one language to another without creating new linguistic structures. This is traditional AI: It presents itself as a proficient entity capable of executing particular tasks based on a predefined set of rules. Other well-known examples of traditional AI are Apple's Siri and Netflix's recommendation engine. Perhaps the best-known is Google's search algorithm, which handles over 5 billion searches a day. These AIs have been trained to follow specific rules, perform a particular task, and do it well, but they don't generate anything new. Generative AI, on the other hand, can be considered the next generation of artificial intelligence. It’s a form of AI capable of generating something new on the basis of the gigantic repository on which it has been trained. For example, if I show a generative model a set of images of cars and trucks, the model must now fully "understand" which features belong to these two classes and how they can be used to generate similar images. The same goes for texts by Victor Hugo or Martin Luther King, for example. Generative AI models are trained on datasets and learn their underlying patterns to generate new data reflecting the training sets. AI Ethics The growing incorporation of AI across all sectors has resulted in numerous use cases, each more pertinent and groundbreaking than the preceding one. These range from the personalization of business recommendations to the prediction of market trends to the implementation of advanced medical diagnostics. The most recent advancement lies in the vast capabilities of generative AI. These exciting technological developments do, however, raise essential questions about the ethics of AI. As we make the most of the benefits and opportunities offered by AI, it's crucial to proactively consider the ethical implications associated with its deployment. AI ethics is positioning itself at the heart of current debates in companies but also within governments, highlighting the need to ensure transparency, accountability, and fairness in the design, deployment, and use of these innovative technologies. "There's a great phrase, written in the '70s: 'The definition of today's AI is a machine that can make a perfect chess move while the room is on fire.' It really speaks to the limitations of AI. In the next wave of AI research, if we want to make more helpful and useful machines, we've got to bring back the contextual understanding" —Fei-Fei Li AI Researcher and Professor, Stanford University The ethical risks of AI are diverse. They include: Discrimination: AI systems can replicate the biases prevalent in society, resulting in discrimination against certain groups, including but not limited to specific ethnicities, genders, or religions. Opacity: AI systems can become increasingly complex and difficult to understand. This can lead to situations where humans are no longer able to explain the decisions made by machines. Malicious use: AI systems can be utilized for malicious intentions, including citizen surveillance, weaponization, cyberbullying, or disseminating misinformation. Breach of regulations: The Artificial Intelligence Act (AI Act) presents a risk-based European regulatory approach to AI. Its objectives tend to guarantee the safety of AI systems on the European market while respecting fundamental rights and EU values, strengthen governance and enforcement to foster investment and innovation in AI, and promote a single market for legal, safe, and reliable AI applications to avoid fragmentation. Many risks are important to consider, such as data confidentiality, copyright issues, or the inclusion of intentional or unintentional biases. This last point will be the subject of a future article. Certain ethical risks are particularly relevant to generative AI: Hallucinations: The term "hallucination" was chosen to name AI behavior when an LLM generates information that turns out to be false. Sometimes, they associate words, names, and ideas that seem to make sense but don't. They can thus contradict logic factual reality or appear to be a chaotic mix of facts. Example: "You can tell chicken eggs from cow eggs by their size and color; cow eggs are generally larger than chicken eggs” — ChatGPT Deepfakes: In this case, Artificial intelligence is used to create image, audio, and video hoaxes and scams. Deepfakes can transform existing content, images, voice, or video by replacing one person with another. They can also create content from scratch featuring a person in a fictitious situation. Source bbc.com An Ethical Approach To AI Confronted with these risks, it's crucial for companies to adopt an ethical approach to AI. This means that companies must: Consider the ethical implications of their AI projects from the very beginning of the constitution of the company's AI strategy upstream of the development processes. Implement measures to prevent ethical risks, such as training teams in AI ethics or setting up mechanisms to monitor and control AI systems. Be transparent about their AI practices and report on their efforts to comply with ethical principles. "Despite the growing awareness of the importance of ethical aspects in the development of artificial intelligence (AI) and the crucial role that AI professionals play in the economy and society, in 12 of the 14 countries for which data is available, less than 1% of the job offers published online in 2022 concerning professionals with AI skills mentioned aspects related to ethics in AI" — Source: "OECD Skills Outlook 2023 : Skills for a Resilient Ecological and Digital Transition" report. Concrete Actions Taken by Companies Businesses can implement a range of tangible measures to incorporate ethics into their AI development strategy. These measures may involve: Create an AI ethics manifesto that outlines the ethical principles the company is dedicated to upholding. Establish protocols to oversee and regulate AI systems. Formalize the role of "Chief Artificial Intelligence Officer" (CAIO) to take on the growing responsibility that AI-related issues are placing on the company. Dividing this responsibility between the CDO or CTO may become less feasible, particularly if companies aim to meet these challenges as efficiently as possible. Conclusion Integrating ethics into AI strategy is a major challenge for companies. By adopting an ethical approach, companies can help ensure that AI is used responsibly and for the benefit of society. All experts in information technology, Artificial Intelligence, and especially in ethics, as well as in ESG, should (must?) help instruct and enhance companies' understanding of the significance of incorporating ethics into their AI development strategy. Among the actions to be taken to raise companies' awareness of AI ethics: Create educational resources, such as guides, articles, or training courses, to help companies understand the ethical challenges of AI. Organize events, such as conferences, MeetUp, or workshops, to debate the ethical challenges of AI and share best practices. Establish partnerships with organizations that share similar values, such as human rights advocacy groups or regulatory bodies, as well as schools and stakeholders from Big Tech who are receptive to these values. I am convinced that these actions will contribute to making ethics an essential component of AI's development strategy. What other measures do you think should be implemented?</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/3051705/user-72.html">Frederic Jacquet</span>
            <span class="disable-select icon-core">
                <img width="18" height="18" alt="DZone Core" src="https://dz2cdn1.dzone.com/themes/dz20/images/dz-core-icon.png" style="margin: 0 0 3px 2px" />
                CORE
            </span>
    </div>
            </div>
        </div>
    </div>
    <div class="sm-resource-block article">
        <div class="sm-resource-block-container">
            <div class="sm-resource-block-left">
                <div class="ribbon-container">
                    <img data-title-hover="#title-12" class="img-responsive thumbnail" src="https://dz2cdn3.dzone.com/thumbnail?fid=17323234&w=660" alt="The Four Steps of Regression Testing"
                         onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'; this.style.padding='4px';">
                </div>
            </div>
            <div class="sm-resource-block-right">
                    <a id="title-12" class="title link-hover-underline" href="/articles/the-four-steps-of-regression-testing">The Four Steps of Regression Testing</a>
                        <p class="article-desc">This article provides a structured approach to create and update a regression test suite. What kinds of tests should be in a regression test suite? Which regression tests should be run, how do you respond to regression tests that fail, and how does a regression test suite evolve? These questions and other considerations are explored in a step-by-step manner. I will first explore the basic dynamics and considerations of regression testing. Then I will provide a set of steps that can help bring long-term software stability from regression testing. Nuts and Bolts of Regression Testing Let's assume that we did a couple of changes in our software code, any kind of changes. How can we be confident that these changes will not negatively affect our code overall? One way to achieve confidence is to perform thorough regression testing. Write and execute tests to check and explore how our code behaves after our changes. So, the more tests we write and execute, the more confident we will be? Yes, but there are practical costs to be considered as well — the time, effort, and money required to write, execute, and maintain a regression test suite. Including every test possible results in a regression test suite that is too large to manage — and it’s challenging to run, as often as changes are made to the software. If the regression tests do not finish in a timely way, the development process is disrupted. It is well worth throwing money at this problem in terms of additional computational resources and/or new hires to execute tests. At some point, however, the added value of adding a test may not be worth the added expenditure of the resources needed to execute it. On the other hand, a test suite that is too small will not cover the functionality of the software sufficiently well, and too many bugs will be passed on to the users. Adding a small number of tests to a regression test suite is usually simple. Even if the marginal cost of each additional test is quite small, cumulatively, the test suite can become unwieldy. Removing tests from a regression test suite may create problems. What if a customer reports a bug that one of the removed tests would have found? Test Case Selection Techniques Selecting the right test cases involves identifying directly and indirectly affected test cases. We should know at least which features are used the most from our customers, which tests cover important functionality and which tests fail often. Other selection techniques include linear equations, symbolic execution, path analysis, data flow analysis, program dependence graphs, system dependence graphs, modification analysis, cluster identification, slicing, graph walks, and modified entity analysis. When it comes to choosing a selection technique, it is useful to think in terms of the following criteria: Inclusiveness Inclusiveness refers to the extent to which a regression test selection technique includes tests that are likely to expose faults introduced by recent changes to the software. A technique is considered more inclusive if it effectively identifies and selects tests that cover modified or affected parts of the code. Inclusiveness is vital to ensure that the selected tests provide thorough coverage of the changes made since the last test cycle. Unsafe techniques have inclusiveness of less than 100%. Precision Precision measures the ability of a regression test selection technique to exclude tests that are unnecessary for the current testing objectives. A precise technique should minimize the inclusion of tests that do not contribute to detecting faults related to recent modifications. This criterion aims to prevent over-testing, which can lead to longer test execution times and resource inefficiency. Efficiency Efficiency evaluates the computational and time resources required to perform regression testing using a particular technique. An efficient technique should be able to quickly identify and select the relevant subset of tests while minimizing the overall testing time. This is especially crucial for large software systems with extensive test suites where faster testing cycles are desirable to support agile development practices. Generality Generality assesses the applicability of a regression test selection technique across various software testing scenarios and domains. A more general technique can be used in a wide range of practical situations without significant customization. It should not be overly specialized for a specific type of software or testing context, making it adaptable to different development projects. In what follows, the four steps of regression testing are explored. We start by identifying the modified code under test. The tests that need to be executed are identified followed by a step for balancing the test suite’s size. It’s all about our test execution results. How extensive did we test, how fast did our tests run, and how confident are we that our test results provide a true picture of the system under test? Software stability in the long term can follow as we get better at each of the four steps. Step 1: Identify Modified Code Determine the specific parts of the software that have been modified since the last regression test cycle. This can be achieved through version control systems and change tracking mechanisms. This step is the foundation for the subsequent regression testing steps. Version Control and Change Tracking To identify modified code, we can use version control systems and change tracking mechanisms. Version control systems like Git, SVN, or Mercurial keep a historical record of changes made to the software's source code. Developers use these systems to commit changes along with descriptive commit messages. Change tracking mechanisms can also include issue tracking systems like JIRA or bug databases. Analyze Commit History In a version control system, we can examine the commit history to see what changes have been made to the codebase. Each commit typically includes information about which files were modified, what lines of code were added, deleted, or modified, and a description of the changes made. By analyzing this commit history, we can pinpoint the specific code that has been altered. Identify Modified Files and Code Sections Based on the commit history, we can identify the modified files and the sections of code within those files that have undergone changes. This may include functions, classes, methods, or even individual lines of code. It's essential to be as granular as possible in identifying the modified code. Document Changes It's helpful to document the nature of the changes. Are these modifications bug fixes, new features, enhancements, or other types of changes? Understanding the nature of the changes can guide our regression testing strategy. Collaboration With Development Team Collaboration between the testing and development teams is crucial during this step. Testers should communicate with developers to get a clear understanding of the changes and their impact on the software's functionality. Traceability Establish traceability between the identified modified code and the corresponding requirements or user stories. This helps ensure that the modifications align with the intended functionality and that our regression tests adequately cover these changes. By the end of Step 1, we should have a comprehensive list of the code that has been modified, along with details about the changes. This information serves as the basis for selecting the relevant tests in Step 2, ensuring that we focus our regression testing efforts on the areas of the software that are most likely to be affected by recent modifications. This targeted approach is the backbone of our regression testing’s structure. It is essential for efficient and effective regression testing. Step 2: Select Relevant Tests Once we have identified the modified code, the next step is to select the relevant tests to include in our regression test suite. This step is critical to ensure that we thoroughly test the changes made to the software. Coverage Criteria The first part of this step involves evaluating coverage criteria to determine which types of tests should be included in our regression test suite. Coverage criteria help us define the scope of our testing efforts. Two common coverage criteria are: Node Coverage (or Method Call Coverage) Node coverage focuses on identifying methods or functions that are never invoked in the modified code. This criterion is essential for ensuring that all parts of our codebase are exercised, which can help uncover dead code or unused functionality. Structural Coverage Structural coverage goes a step further by analyzing which code paths are affected by the modifications. This criterion considers not only whether methods are called but also the specific execution paths within those methods. Techniques like statement coverage, branch coverage, and path coverage fall under this category. It helps ensure that not only every method is invoked but also that different execution branches and scenarios are tested. Selection of Tests For each modification identified in Step 1, we need to select tests that directly or indirectly exercise the modified code. Directly Affected Tests Identify the tests that directly cover the modified code. These are the tests that specifically target the functions or methods that have been changed. Running these tests helps ensure that the modifications are working as intended and haven't introduced new bugs. Indirectly Affected Tests Some changes may have ripple effects on other parts of the software. Indirectly affected tests are those that may not directly exercise the modified code but interact with it in some way. For example, if a change in one module affects the output of another module, tests for the latter module should also be considered. Test Adequacy It's crucial to assess the adequacy of our selected tests. Ask yourself if these tests provide sufficient coverage of the modified code. Consider the complexity of the changes and the potential impact on the software's behavior. In some cases, we may need to create new tests specifically tailored to the changes. Documentation Keep thorough documentation of which tests are selected for each modification. This documentation ensures transparency and allows for easy tracking of test coverage for different code changes. By the end of Step 2, we should have a well-defined regression test suite that includes the necessary tests to validate the modified code effectively. This focused approach to test selection ensures that our testing efforts are comprehensive, helping us catch regressions and defects early in the development cycle. Step 3: Balance Test Suite Size While it's essential to select tests that adequately cover the modified code, it's equally important to avoid including every possible test in the regression test suite. Managing a massive test suite can become time-consuming and resource-intensive. The third step in regression testing can focus on managing the size of our regression test suite effectively. It's essential to strike a balance between thorough testing and practicality. Avoid Including Every Possible Test Including every conceivable test in our regression test suite is generally not feasible. As our software evolves, the number of tests can grow exponentially, making it impractical to execute them all within a reasonable timeframe. Running an exhaustive set of tests could significantly slow down the testing process, making it difficult to keep up with the pace of development. The optimal size of our regression test suite should be determined. This size can be based on factors like resources availability, time constraints, risks, development process and prioritization. Available Resources Consider the hardware, software, and team members available for testing. Limited resources may restrict the size of our test suite. Time Constraints Be aware of project deadlines and release schedules. We should aim to complete regression testing within the available time while ensuring adequate coverage. Risk Assessment Evaluate the criticality of the modified code and the potential impact of defects. Highly critical code changes may require more extensive testing, while less critical changes can be covered with a smaller test suite. Development Process Considerations The choice of test suite size should align with the development process. In Agile methodologies, where changes are frequent, regression tests are typically executed more often (e.g., after each sprint or iteration). Therefore, the test suite size for each regression cycle may be smaller to keep testing agile and responsive to changes. In more traditional development processes, where changes are less frequent and releases occur less often, regression tests may be conducted less frequently. In such cases, we might have larger test suites that cover a broader range of functionality. Prioritization Consider prioritizing tests based on factors such as critical business functionality, frequently used features, or areas with a history of defects. This can help ensure that the most critical parts of the software are thoroughly tested even if we have limitations on the test suite size. Documentation Our decisions regarding test suite size should be documented. This documentation will serve as a guideline for our testing strategy and provide transparency to all stakeholders. Balancing the size of our regression test suite is essential for efficient testing. It allows us to focus our testing efforts where they matter most while ensuring that we can complete regression testing within our project's constraints. By tailoring our test suite size to our specific context, we can strike the right balance between thoroughness and practicality in regression testing. Step 4: Execute Tests and Handle Results With a balanced regression test suite at hand, we can now execute it and evaluate our test results. Tests that Fail If one or more regression tests fail, investigate whether the failure is due to a fault in the software modification or an issue within the regression test itself. Did the test fail for the right reasons or for the wrong reasons? The right reason for a test to fail is that it found a bug. One wrong reason is that there is no bug and the test fails because of how it is written or executed. Additional work is required in either case. Tests that Pass If no regression tests fail, then we should be able to answer the following question confidently. Do our tests pass for the right reasons or for the wrong reasons? One right reason for this to happen is that tests exercise parts of the code that function properly. However, a test could pass testing because it may actually test nothing. It is an old test that was not maintained properly and it currently doesn't test what it was intended to test. It happens to pass testing accidentally. Test Automation Regression testing is an area that test automation gives its most benefit. Ideally, we would like to ensure that all regression tests are automated. If this was always feasible and practical, then regression testing execution would take no manual effort and would be repeatable at any time. Unfortunately, there may be automated regression tests that fail for unknown reasons, while some of them fail regularly and others irregularly. Some tests will execute fast, others will be slow, and others may execute fast in some runs and slow at other runs. Problems like these may be solved, but if we don’t solve them, as the number of regression tests increases, they can only get worse. Test automation is most valuable when it is used in a continuous integration/continuous delivery (CI/CD) pipeline. If our project follows a CI/CD pipeline, we may have the opportunity to automate and streamline regression testing. Smaller, focused test suites can be run more frequently as part of the CI/CD process, catching regressions early in the development cycle. Keep in mind that automation testing has the same goal as manual testing: To give us a clear picture if the system under test behaves as expected. As we should be confident from our manual testing results, we should also be confident from our automation testing results. When an automated regression test suite finishes execution, we should be confident that the test results depict the true picture of the system under test. The more confident we are, the less time that we will spend debugging the results of our automated tests and identifying real bugs or fixing tests that are useless. Wrapping Up To adapt to software changes, we must first recognize that a regression test suite suitable for one version of the software may not suffice for subsequent versions. The first step is to identify what changed in our code. We must account for different types of code changes like creating new features, improving existing features, fixing bugs and glitches, refactorings, and performance improvements. Even when functionality remains unchanged, we must reassess the regression test suite's adequacy, especially if there's code restructuring. The second step is to identify what tests to include in our regression test suite. We can select all relevant tests that cover the code changes identified from step 1. Regression test suites should be created or modified as needed to incorporate new tests that cover altered functionality or code paths. Bear in mind that there are no perfect metrics. For example, node coverage can be a useful metric but it is possible to have a high node coverage and still have gaps in the test suite. For example, a test suite may cover all the nodes in a program, but it may not test important input values or execution paths. The third step is to balance our test suite’s size. This is very important, as the number of tests grows and/or the time it takes for test execution to finish becomes an obstacle. Obsolete tests that are no longer relevant due to software changes can be removed. Once test execution has finished, it is important to scrutinize our test results. Once we are confident that our test results are trustworthy, we can share our findings with the appropriate stakeholders.</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/4007510/stelm.html">Stelios Manioudakis</span>
    </div>
            </div>
        </div>
    </div>
    <div class="sm-resource-block article">
        <div class="sm-resource-block-container">
            <div class="sm-resource-block-left">
                <div class="ribbon-container">
                    <img data-title-hover="#title-13" class="img-responsive thumbnail" src="https://dz2cdn1.dzone.com/thumbnail?fid=17317149&w=660" alt="Mastering Java Persistence: Best Practices for Cloud-Native Applications and Modernization"
                         onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'; this.style.padding='4px';">
                </div>
            </div>
            <div class="sm-resource-block-right">
                    <a id="title-13" class="title link-hover-underline" href="/articles/mastering-java-persistence-best-practices-for-clou">Mastering Java Persistence: Best Practices for Cloud-Native Applications and Modernization</a>
                        <p class="article-desc">In the ever-evolving landscape of software engineering, the database stands as a cornerstone for storing and managing an organization's critical data. From ancient caves and temples that symbolize the earliest forms of information storage to today's distributed databases, the need to persistently store and retrieve data has been a constant in human history. In modern applications, the significance of a well-managed database is indispensable, especially as we navigate the complexities of cloud-native architectures and application modernization. Why a Database? 1. State Management in Microservices and Stateless Applications In the era of microservices and stateless applications, the database plays a pivotal role in housing the state and is crucial for user information and stock management. Despite the move towards stateless designs, certain aspects of an application still require a persistent state, making the database an integral component. 2. Seizing Current Opportunities The database is not just a storage facility; it encapsulates the current opportunities vital for an organization's success. Whether it's customer data, transaction details, or real-time analytics, the database houses the pulse of the organization's present, providing insights and supporting decision-making processes. 3. Future-Proofing for Opportunities Ahead As organizations embrace technologies like Artificial Intelligence (AI) and Machine Learning (ML), the database becomes the bedrock for unlocking new opportunities. Future-proofing involves not only storing current data efficiently but also structuring the database to facilitate seamless integration with emerging technologies. The Challenges of Database Management Handling a database is not without its challenges. The complexity arises from various factors, including modeling, migration, and the constant evolution of products. 1. Modeling Complexity The initial modeling phase is crucial, often conducted when a product is in its infancy, or the organization lacks the maturity to perform optimally. The challenge lies in foreseeing the data requirements and relationships accurately. 2. Migration Complexity Unlike code refactoring on the application side, database migration introduces complexity that surpasses application migration. The need for structural changes, data transformations, and ensuring data integrity makes database migration a challenging endeavor. 3. Product Evolution Products evolve, and so do their data requirements. The challenge is to manage the evolutionary data effectively, ensuring that the database structure remains aligned with the changing needs of the application and the organization. Polyglot Persistence: Exploring Database Options In the contemporary software landscape, the concept of polyglot persistence comes into play, allowing organizations to choose databases that best suit their specific scenarios. This approach involves exploring relational databases, NoSQL databases, and NewSQL databases based on the application's unique needs. Integrating Database and Application: Bridging Paradigms One of the critical challenges in mastering Java Persistence lies in integrating the database with the application. This integration becomes complex due to the mismatch between programming paradigms in Java and database systems. Patterns for Integration Several design patterns aid in smoothing the integration process. Patterns like Driver, Active Record, Data Mapper, Repository, DAO (Data Access Object), and DTO (Data Transfer Object) provide blueprints for bridging the gap between the Java application and the database. Data-Oriented vs. Object-Oriented Programming While Java embraces object-oriented programming principles like inheritance, polymorphism, encapsulation, and types, the database world revolves around normalization, denormalization, and structural considerations. Bridging these paradigms requires a thoughtful approach. Principles of Database-Oriented Programming: Separating Code (Behavior) from Data Encourage a clean separation between business logic and data manipulation. Representing Data with Generic Data Structures Use generic structures to represent data, ensuring flexibility and adaptability. Treating Data as Immutable Embrace immutability to enhance data consistency and reliability. Separating Data Schema from Data Representation Decouple the database schema from the application's representation of data to facilitate changes without affecting the entire system. Principles of Object-Oriented Programming Expose Behavior and Hide Data Maintain a clear distinction between the functionality of objects and their underlying data. Abstraction Utilize abstraction to simplify complex systems and focus on essential features. Polymorphism Leverage polymorphism to create flexible and reusable code. Conclusion Mastering Java Persistence requires a holistic understanding of these principles, patterns, and paradigms. The journey involves selecting the proper database technologies and integrating them seamlessly with Java applications while ensuring adaptability to future changes. In this dynamic landscape, success stories, documentation, and a maturity model serve as guiding beacons, aiding developers and organizations in their pursuit of efficient and robust database management for cloud-native applications and modernization initiatives. Video and Slide Presentation Slides</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/2659907/otaviojava.html">Otavio Santana</span>
            <span class="disable-select icon-core">
                <img width="18" height="18" alt="DZone Core" src="https://dz2cdn2.dzone.com/themes/dz20/images/dz-core-icon.png" style="margin: 0 0 3px 2px" />
                CORE
            </span>
    </div>
            </div>
        </div>
    </div>
    <div class="sm-resource-block article">
        <div class="sm-resource-block-container">
            <div class="sm-resource-block-left">
                <div class="ribbon-container">
                    <img data-title-hover="#title-14" class="img-responsive thumbnail" src="https://dz2cdn1.dzone.com/thumbnail?fid=17320310&w=660" alt="Building LangChain Applications With Amazon Bedrock and Go: An Introduction"
                         onerror="this.src='https://dz2cdn1.dzone.com/themes/dz20/images/question-mark-icon.png'; this.style.padding='4px';">
                </div>
            </div>
            <div class="sm-resource-block-right">
                    <a id="title-14" class="title link-hover-underline" href="/articles/building-langchain-applications-with-amazon-bedroc">Building LangChain Applications With Amazon Bedrock and Go: An Introduction</a>
                        <p class="article-desc">One of our earlier blog posts discussed the initial steps for diving into Amazon Bedrock by leveraging the AWS Go SDK. Subsequently, our second blog post expanded upon this foundation, showcasing a Serverless Go application designed for image generation with Amazon Bedrock and AWS Lambda ("Generative AI Apps With Amazon Bedrock: Getting Started for Go Developers"). Amazon Bedrock is a fully managed service that makes base models from Amazon and third-party model providers (such as Anthropic, Cohere, and more) accessible through an API. The applications demonstrated in those blog posts accessed Amazon Bedrock APIs directly, thereby avoiding any additional layers of abstraction or frameworks/libraries. This approach is particularly effective for learning and crafting straightforward solutions. However, developing generative AI applications goes beyond simply using large language models (LLMs) via an API. You need to think about other parts of the solution which include intelligent search (also known as semantic search that often requires specialized data stores), orchestrating sequential workflows (e.g., invoking another LLM based on the previous LLM response), loading data sources (text, PDF, links, etc.) to provide additional context for LLMs, maintaining historical context (for conversational/chatbot/QA solutions) and much more. Implementing these features from scratch can be difficult and time-consuming. Enter LangChain, a framework that provides off-the-shelf components to make it easier to build applications with language models. It is supported in multiple programming languages. This obviously includes Python, but also JavaScript, Java, and Go. langchaingo is the LangChain implementation for the Go programming language. This blog post covers how to extend langchaingo to use foundation model from Amazon Bedrock. The code is available in this GitHub repository. LangChain Modules One of LangChain's strengths is its extensible architecture - the same applies to the langchaingo library as well. It supports components/modules, each with interface(s) and multiple implementations. Some of these include: Models: These are the building blocks that allow LangChain apps to work with multiple language models (such as ones from Amazon Bedrock, OpenAI, etc.). Chain: These can be used to create a sequence of calls that combine multiple models and prompts. Vector databases: They can store unstructured data in the form of vector embedding. At query time, the unstructured query is embedded, and semantic/vector search is performed to retrieve the embedding vectors that are "most similar" to the embedded query. Memory: This module allows you to persist the state between chain or agent calls. By default, chains are stateless, meaning they process each incoming request independently (the same goes for LLMs). This provides ease of use, choice, and flexibility while building LangChain-powered Go applications. For example, you can change the underlying vector database by swapping the implementation with minimal code changes. Since langchaingo provides many large language model implementations, the same applies here as well. langchaingo Implementation for Amazon Bedrock As mentioned before, Amazon Bedrock processes access to multiple models including Cohere, Anthropic, etc. We will cover how to extend Amazon Bedrock to build a plugin for the Anthropic Claude (v2) model, but the guidelines apply to other models as well. Let's walk through the implementation at a high level. Any custom model (LLM) implementation has to satisfy langchaingo LLM and LanguageModel interfaces. So it implements Call, Generate, GeneratePrompt and GetNumTokens functions. The key part of the implementation is in the Generate function. Here is a breakdown of how it works. The first step is to prepare the JSON payload to be sent to Amazon Bedrock. This contains the prompt/input along with other configuration parameters. //... payload := Request{ MaxTokensToSample: opts.MaxTokens, Temperature: opts.Temperature, TopK: opts.TopK, TopP: opts.TopP, StopSequences: opts.StopWords, } if o.useHumanAssistantPrompt { payload.Prompt = fmt.Sprintf(claudePromptFormat, prompts[0]) } else { } payloadBytes, err := json.Marshal(payload) if err != nil { return nil, err } It is represented by the Request struct which is marshalled into JSON before being sent to Amazon Bedrock. type Request struct { Prompt string `json:"prompt"` MaxTokensToSample int `json:"max_tokens_to_sample"` Temperature float64 `json:"temperature,omitempty"` TopP float64 `json:"top_p,omitempty"` TopK int `json:"top_k,omitempty"` StopSequences []string `json:"stop_sequences,omitempty"` } 2. Next Amazon Bedrock is invoked with the payload and config parameters. Both synchronous and streaming invocation modes are supported. The streaming/async mode will be demonstrated in an example below: //... if opts.StreamingFunc != nil { resp, err = o.invokeAsyncAndGetResponse(payloadBytes, opts.StreamingFunc) if err != nil { return nil, err } } else { resp, err = o.invokeAndGetResponse(payloadBytes) if err != nil { return nil, err } } This is how the asynchronous invocation path is handled - the first part involves using the InvokeModelWithResponseStream function and then handling InvokeModelWithResponseStreamOutput response in the ProcessStreamingOutput function. You can refer to the details in Using the Streaming API section in "Generative AI Apps With Amazon Bedrock: Getting Started for Go Developers," linked in the introduction of this article. //... func (o *LLM) invokeAsyncAndGetResponse(payloadBytes []byte, handler func(ctx context.Context, chunk []byte) error) (Response, error) { output, err := o.brc.InvokeModelWithResponseStream(context.Background(), &amp;bedrockruntime.InvokeModelWithResponseStreamInput{ Body: payloadBytes, ModelId: aws.String(o.modelID), ContentType: aws.String("application/json"), }) if err != nil { return Response{}, err } var resp Response resp, err = ProcessStreamingOutput(output, handler) if err != nil { return Response{}, err } return resp, nil } func ProcessStreamingOutput(output *bedrockruntime.InvokeModelWithResponseStreamOutput, handler func(ctx context.Context, chunk []byte) error) (Response, error) { var combinedResult string resp := Response{} for event := range output.GetStream().Events() { switch v := event.(type) { case *types.ResponseStreamMemberChunk: var resp Response err := json.NewDecoder(bytes.NewReader(v.Value.Bytes)).Decode(&amp;resp) if err != nil { return resp, err } handler(context.Background(), []byte(resp.Completion)) combinedResult += resp.Completion case *types.UnknownUnionMember: fmt.Println("unknown tag:", v.Tag) default: fmt.Println("union is nil or unknown type") } } resp.Completion = combinedResult return resp, nil } 3. Once the request is processed successfully, the JSON response from Amazon Bedrock is converted (un-marshaled) back in the form of a Response struct and a slice of Generation instances as required by the Generate function signature. //... generations := []*llms.Generation{ {Text: resp.Completion}, } Code Samples: Use the Amazon Bedrock Plugin in LangChain Apps Once the Amazon Bedrock LLM plugin for langchaingo has been implemented, using it is as easy as creating a new instance with claude.New(&lt;supported AWS region&gt;) and using the Call (or Generate) function. Here is an example: package main import ( "context" "fmt" "log" "github.com/build-on-aws/langchaingo-amazon-bedrock-llm/claude" "github.com/tmc/langchaingo/llms" ) func main() { llm, err := claude.New("us-east-1") input := "Write a program to compute factorial in Go:" opt := llms.WithMaxTokens(2048) output, err := llm.Call(context.Background(), input, opt) //.... Prerequisites Before executing the sample code, clone the GitHub repository and change to the right directory: git clone github.com/build-on-aws/langchaingo-amazon-bedrock-llm cd langchaingo-amazon-bedrock-llm/examples Refer to the Before You Begin section in "Generative AI Apps With Amazon Bedrock: Getting Started for Go Developers" to complete the prerequisites for running the examples. This includes installing Go, configuring Amazon Bedrock access, and providing necessary IAM permissions. Run Basic Examples This example demonstrates tasks such as code generation, information extraction, and question-answering. You can refer to the code here. go run main.go Run Streaming Output Example In this example, we pass in the WithStreamingFunc option to the LLM invocation. This will switch to the streaming invocation mode for Amazon Bedrock. You can refer to the code here. //... _, err = llm.Call(context.Background(), input, llms.WithMaxTokens(2048), llms.WithTemperature(0.5), llms.WithTopK(250), llms.WithStreamingFunc(func(ctx context.Context, chunk []byte) error { fmt.Print(string(chunk)) return nil })) To run the program: go run streaming/main.go Conclusion LangChain is a powerful and extensible library that allows us to plugin external components as per requirements. This blog demonstrated how to extend langchaingo to make sure it works with the Anthropic Claude model available in Amazon Bedrock. You can use the same approach to implement support for other Amazon Bedrock models such as Amazon Titan. The examples showed how to use simple LangChain apps to using the Call function. In future blog posts, I will cover how to use them as part of chains for implementing functionality like a chatbot or QA assistant. Until then, happy building!</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/456870/abhirockzz.html">Abhishek Gupta</span>
            <span class="disable-select icon-core">
                <img width="18" height="18" alt="DZone Core" src="https://dz2cdn1.dzone.com/themes/dz20/images/dz-core-icon.png" style="margin: 0 0 3px 2px" />
                CORE
            </span>
    </div>
            </div>
        </div>
    </div>
    <div class="sm-resource-block article">
        <div class="sm-resource-block-container">
            <div class="sm-resource-block-left">
                <div class="ribbon-container">
                    <img data-title-hover="#title-15" class="img-responsive thumbnail" src="https://dz2cdn2.dzone.com/thumbnail?fid=17230280&w=660" alt="A Complete Guide To IoT Development Boards"
                         onerror="this.src='https://dz2cdn4.dzone.com/themes/dz20/images/question-mark-icon.png'; this.style.padding='4px';">
                </div>
            </div>
            <div class="sm-resource-block-right">
                    <a id="title-15" class="title link-hover-underline" href="/articles/a-complete-guide-to-iot-development-boards">A Complete Guide To IoT Development Boards</a>
                        <p class="article-desc">IoT developers know how important it is to find not just what works but what works best for a particular IoT use case. After all, a smart proximity sensor in an IoT security system is very different from a smartwatch you might use to monitor your health, take calls, send messages, and more. The same goes for development boards, which are a central part of any IoT device. Each one comes with its own set of specifications and pros and cons. Learn how to find the best boards for your specific project and what the differences are between them in this guide. What Are IoT Development Boards? Any IoT product will likely have gone through various different iterations before it finally hits the shelves. Developers will make changes like adding or removing features, altering the user interface based on consumer feedback, etc. Unlike a market-ready IoT device, in which the circuit board and electronics inside are hidden by the outer plastic, a development board has everything you need to configure an IoT device exposed for easy access so developers can test out different settings and make changes on the fly. Development boards are just printed circuit boards with either a microcontroller or a microprocessor mounted on them and with various metal pins that an experienced developer can use to develop, prototype, and iterate different versions of various smart products. They’re also used by hobbyists to help them become more familiar with development concepts and hardware. IoT developers can also use the boards to develop a Minimum Viable Product (MVP). The purpose of an MVP is to attract early adopters, show the potential of a final product design, and gain both funding and interest. The MVP stage involves making changes based on initial user feedback, so it’s especially important to have full access to the hardware. Finally, a development board provides the perfect staging ground for trying out a new software product, app, or IoT platform prior to rolling it out on an entire line of smart products. What Are the Different IoT Development Board Categories? The major categories within IoT development boards are Field Programmable Gate Arrays (FPGA), Application-Specific Integrated Circuits (ASIC), and Single Board Computers (SBC). Let’s look at each in turn. You can think of an FPGA as a book that hasn’t been written yet. It doesn’t have a specific purpose, and it’s up to you as the writer to decide what its purpose will be. FPGAs lead all of the configuration up to you. The “field-programmable” part also means that you can “re-write” the purpose of the device at any time. That makes it best suited for the prototyping stages in which you might need to make changes on the fly or develop new functionalities for the device. FPGAs are best used by experienced developers since they don’t come with the hardware pre-configured. If you want to use an FPGA development board properly, you’ll have to learn a Hardware Development Language (HDL). Learning an HDL has been compared to learning complex digital programming languages like C. HDLs help the developer know how the device will respond to various configurations. An ASIC development board, unlike an FPGA, comes pre-programmed with a specific purpose or purpose in mind. It leaves a lot less work to the developer. However, an ASIC board isn’t always best for prototyping because you can’t make major changes to the configuration. Finally, an SBC development board is a full-fledged computer that comes on a single board. The Raspberry Pi might be the best-known example. An SBC has a lot of processing power. While it’s nowhere near as customizable as an FPGA, it will generally have enough different input and output (I/O) options to apply to many different IoT use cases. However, SBCs also require a lot more energy than other development board options. And although their physical size is relatively small, they’re still far too large for, say, a simple smart temperature sensor. Important Features of Development Boards FPGA, ASIC, and SBC development boards have everything you need for an IoT device system in the form of a processor, an operating system, input and output options, and more. But they will differ in what type of processor they use. An FPGA might use either a microprocessor (MPU) or a microcontroller (MCU), whereas an ASIC will generally use one or more MCUs. An SBC, on the other hand, generally relies on an MPU. The reason for these differences is that a microprocessor is higher-powered and suitable for performing multiple tasks rather than just one. It has a full operating system, generally Linux-based, and tends to be higher-cost than an MCU as a result. By contrast, a microcontroller is a low-powered device that’s better suited for a single task that an ASIC might perform. MCUs rely on something called task switching to provide a real-time response to input. Task switching means the MCU will decide which task to perform first based on priority rather than trying to perform multiple tasks at the same time. Since the MCU can focus all of its processing power on one task, that task gets finished very quickly. So, in manufacturing, where a machine might need to turn off within a millisecond of reaching a dangerous temperature in order to avoid a fire, an MCU often provides the best performance. For these reasons, you always need to know whether the development board you plan to buy has an MCU or an MPU. Here are some other features to look out for as well: Open-Source Hardware (OSHW) OSHW is just what it sounds like. Just as there are open-source software designs that allow you to see and freely change the code at will, there are open-source hardware development boards that let you freely use and change the configuration as needed. Arduino development boards are one example. Available Ports When you start to develop a new IoT device, determine what kinds of input and output ports you will need for your specific application. For example, do you want to allow USB connectivity? Do you need an HDMI port for video streaming? Operating System An SBC will generally use Linux, but what about an ASIC development board? ASICs will often rely on a real-time operating system (RTOS). An RTOS is a simplified operating system that performs a single task at a time and switches between tasks. There are also ASICs that have a tick scheduler rather than an OS. A tick scheduler just repeats a single task at certain preset intervals. Connectivity Options These days, one of the most popular features of any IoT device is mobile connectivity. In other words, most consumers want the ability to view the status of their IoT devices remotely and control those devices right from a smartphone. For those purposes, you should examine whether the development board has Bluetooth, wireless internet, 4G, or 5G connectivity capabilities. Random Access Memory If you work with computers much, you’re already familiar with the concept of RAM. While storage memory refers to how much data you can keep on your device, RAM refers to temporary memory that’s used to perform tasks at any given time. So, more memory means the device can perform more tasks or just one task with more processing power. Your cost will go up as RAM increases, so for simple tasks, less RAM is often actually better. Processor Choosing the best processor is far too complicated to go into detail here, but it’s enough to know that three of the top processor options are ARM, Intel x86, and AMD. Intel x86 processors are used in most personal computers for their speed and processing power, but they use more energy as a result. AMDs have even more processing power on average, whereas ARM processors have simpler instruction sets and require less power. ARM processors also tend to be physically smaller, meaning they fit better in size-constrained IoT devices. So, in low-power environments, ARM is often the best option. Examples of IoT Development Boards Some of the top IoT development boards are from the Espressif ESP32 family and the Renesas RA MCU series. Other top providers include NXP, Texas Instruments, STMicro, and Microchip, among others. ESP32 development boards can come in various sizes and levels of processing power. In general, they are low-cost, MCU-based, and low-power, which is ideal for energy-constrained applications. They support Wi-Fi and Bluetooth and have various I/Os to allow you to configure or customize the development boards as needed. Many (but not all) boards in the ESP32 family also have USB connectivity. Renesas is another top provider of IoT development boards, especially of MCU boards. The RA MCU series are general-purpose, so they can be used for many different applications and configured as necessary. RA MCUs tend to be easy to use and debug and have quick start options to let developers get started immediately. Different options within the RA series will include different input and connectivity features, so you’ll have to look at each individually to determine the best board for your use case. There’s also the STM32 family from STMicroelectronics. These are also MCU boards and come with a huge range of features and options, from high-performance and higher-energy versions to ultra-low power options and long-range wireless MCUs. They can come in both single and dual-core versions and are commonly used in consumer IoT devices. STM32 Nucleo boards are commonly used for prototyping and are very developer-friendly and compatible with a variety of development environments and platforms. Arduino is also a popular option for boards with the lowest power consumption and simplest designs. For example, the Arduino Uno is ideal for less experienced developers, and the Arduino Cloud platform makes it easy to create a connected device in minutes. There’s also the Arduino Nano for the smallest IoT devices, which is a cheap, low-power option that offers Bluetooth connectivity. Additionally, Arduino offers its own development environment. Lastly, there are the C2000 and MSP430 MCU boards from Texas Instruments. Texas Instruments provides cost-efficient options for development boards with a huge range of memory and peripheral choices. C2000 boards are specifically designed for real-time capabilities, so they are highly suitable for industrial IoT applications and are made for performance and speed. There are over 2000 different MSP430 devices, and these are designed for quick time-to-market, easy development, flexibility, and cost efficiency. Texas Instruments also offers starter kits, comprehensive documentation, and software resources. Wrapping Up A development board is normally the starting ground for any new IoT project. It allows you to make changes, adjust to feedback, and produce the best possible device for your particular use case. Now you can go in fully informed and ready to find and test out the ideal development board for your project.</p>
    <div class="author">
        By <span class="article-author" data-goto="/users/4438361/carsten-nabto.html">Carsten Rhod Gregersen</span>
    </div>
            </div>
        </div>
    </div>
            </div>

            <div class="parent-category-container" style="background-image: url('https://dz2cdn1.dzone.com/themes/dz20/images/polygon-scatter-haikei-shapes.svg');">
                  <div class="parent-category">
                    <div class="parent-category-top">
                      <h3 data-goto="/culture-and-methodologies">Culture and Methodologies</h3>
                    </div>
                    <div class="parent-category-body">
                              <div class="parent-category-category" data-click-target="#cat1">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn2.dzone.com/storage/temp/16214659-agile.png" alt="Agile"
                                       onerror="this.src='https://dz2cdn4.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/agile" id="cat1">Agile</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat2">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn2.dzone.com/storage/temp/16201050-career-development.png" alt="Career Development"
                                       onerror="this.src='https://dz2cdn3.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/career-development" id="cat2">Career Development</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat3">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn2.dzone.com/storage/temp/16410523-methodologies.png" alt="Methodologies"
                                       onerror="this.src='https://dz2cdn3.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/methodologies" id="cat3">Methodologies</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat4">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn4.dzone.com/storage/temp/16211584-team-management.png" alt="Team Management"
                                       onerror="this.src='https://dz2cdn4.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/team-management" id="cat4">Team Management</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                          <div class="parent-category-articles">
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/ai-career-trends-whats-hot-in-the-world-of-artific">AI Career Trends: What's Hot in the World of Artificial Intelligence?</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 17, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/4999698/son-nguyen.html')">Son Nguyen</span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/the-role-of-an-internal-devsecops-platform-in-the">The Role of an Internal DevSecOps Platform in the Digital Age</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 16, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/4571878/ruchita-123.html')">Ruchita Varma</span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/operational-testing-tutorial-comprehensive-guide-w">Operational Testing Tutorial: Comprehensive Guide With Best Practices</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">May 16, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/3428461/harshitpaul.html')">Harshit Paul</span>
                                  </p>
                                </div>
                          </div>
                    </div>
                  </div>
                  <div class="parent-category">
                    <div class="parent-category-top">
                      <h3 data-goto="/data-engineering">Data Engineering</h3>
                    </div>
                    <div class="parent-category-body">
                              <div class="parent-category-category" data-click-target="#cat5">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn2.dzone.com/storage/temp/16198243-ai-ml.png" alt="AI/ML"
                                       onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/ai-ml" id="cat5">AI/ML</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat6">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn4.dzone.com/storage/temp/16220811-big-data.png" alt="Big Data"
                                       onerror="this.src='https://dz2cdn1.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/big-data" id="cat6">Big Data</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat7">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn4.dzone.com/storage/temp/16210716-databases.png" alt="Databases"
                                       onerror="this.src='https://dz2cdn4.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/databases" id="cat7">Databases</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat8">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn4.dzone.com/storage/temp/16220923-iot.png" alt="IoT"
                                       onerror="this.src='https://dz2cdn4.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/iot" id="cat8">IoT</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                          <div class="parent-category-articles">
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/unveiling-the-application-modernization-roadmap-a">Unveiling the Application Modernization Roadmap: A Swift and Secure Journey to the Cloud</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 17, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/4957975/kap-wilson.html')">Kapil Rawal</span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/mastering-prompt-engineering-in-ai-language-models">Mastering Prompt Engineering In AI Language Models</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 17, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/3343119/oriol-saludes.html')">Oriol Sr</span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/explainable-ai-making-the-black-box-transparent">Explainable AI: Making the Black Box Transparent</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">May 16, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/4914700/sarahpop.html')">Yifei Wang</span>
                                  </p>
                                </div>
                          </div>
                    </div>
                  </div>
                  <div class="parent-category">
                    <div class="parent-category-top">
                      <h3 data-goto="/software-design-and-architecture">Software Design and Architecture</h3>
                    </div>
                    <div class="parent-category-body">
                              <div class="parent-category-category" data-click-target="#cat9">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn3.dzone.com/storage/temp/16209911-cloud-architecture.png" alt="Cloud Architecture"
                                       onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/cloud-architecture" id="cat9">Cloud Architecture</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat10">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn4.dzone.com/storage/temp/16216332-integration.png" alt="Integration"
                                       onerror="this.src='https://dz2cdn3.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/integration" id="cat10">Integration</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat11">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn3.dzone.com/storage/temp/16210822-microservices-architecture.png" alt="Microservices"
                                       onerror="this.src='https://dz2cdn4.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/microservices" id="cat11">Microservices</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat12">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn3.dzone.com/storage/temp/16219128-performance.png" alt="Performance"
                                       onerror="this.src='https://dz2cdn3.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/performance" id="cat12">Performance</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                          <div class="parent-category-articles">
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/modern-application-performance">Modern Application Performance</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 18, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/3403739/satrajitbasu.html')">Satrajit Basu</span>
                                        <span class="disable-select icon-core">
                                          <img width="18" height="18" alt="DZone Core" src="https://dz2cdn3.dzone.com/themes/dz20/images/dz-core-icon.png" style="margin: 0 0 3px 5px; filter: brightness(0) invert(1);" />
                                          CORE
                                        </span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/unveiling-the-application-modernization-roadmap-a">Unveiling the Application Modernization Roadmap: A Swift and Secure Journey to the Cloud</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 17, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/4957975/kap-wilson.html')">Kapil Rawal</span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/low-code-vs-traditional-development-a-comprehensiv">Low Code vs. Traditional Development: A Comprehensive Comparison</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">May 16, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/4901748/frontendmag.html')">Tien Nguyen</span>
                                  </p>
                                </div>
                          </div>
                    </div>
                  </div>
                  <div class="parent-category">
                    <div class="parent-category-top">
                      <h3 data-goto="/coding">Coding</h3>
                    </div>
                    <div class="parent-category-body">
                              <div class="parent-category-category" data-click-target="#cat13">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn1.dzone.com/storage/temp/16218072-framework.png" alt="Frameworks"
                                       onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/frameworks" id="cat13">Frameworks</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat14">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn4.dzone.com/storage/temp/16218081-java.png" alt="Java"
                                       onerror="this.src='https://dz2cdn4.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/java" id="cat14">Java</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat15">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn1.dzone.com/storage/temp/16219112-javascript.png" alt="JavaScript"
                                       onerror="this.src='https://dz2cdn4.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/javascript" id="cat15">JavaScript</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat16">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn1.dzone.com/storage/temp/16230182-programming-languages.png" alt="Languages"
                                       onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/languages" id="cat16">Languages</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat17">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn3.dzone.com/storage/temp/16209859-development-tools.png" alt="Tools"
                                       onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/tools" id="cat17">Tools</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                          <div class="parent-category-articles">
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/how-to-handle-secrets-in-helm">How to Handle Secrets in Helm</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 17, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/4648218/ironcore864.html')">Tiexin Guo</span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/acting-soon-on-kafka-deserialization-errors">Acting Soon on Kafka Deserialization Errors</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 17, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/420970/horatiucd.html')">Horatiu Dan</span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/scaling-event-driven-applications-made-easy-with-s">Scaling Event-Driven Applications Made Easy With Sveltos Cross-Cluster Configuration</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">May 15, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/4913963/mgianluc.html')">Gianluca Mardente</span>
                                  </p>
                                </div>
                          </div>
                    </div>
                  </div>
                  <div class="parent-category">
                    <div class="parent-category-top">
                      <h3 data-goto="/testing-deployment-and-maintenance">Testing, Deployment, and Maintenance</h3>
                    </div>
                    <div class="parent-category-body">
                              <div class="parent-category-category" data-click-target="#cat18">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn2.dzone.com/storage/temp/16412754-deployment.png" alt="Deployment"
                                       onerror="this.src='https://dz2cdn3.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/deployment" id="cat18">Deployment</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat19">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn2.dzone.com/storage/temp/16219978-devops.png" alt="DevOps and CI/CD"
                                       onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/devops-and-cicd" id="cat19">DevOps and CI/CD</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat20">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn1.dzone.com/storage/temp/16421602-maintenance.png" alt="Maintenance"
                                       onerror="this.src='https://dz2cdn4.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/maintenance" id="cat20">Maintenance</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat21">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn2.dzone.com/storage/temp/16230575-monitoring.png" alt="Monitoring and Observability"
                                       onerror="this.src='https://dz2cdn3.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/monitoring-and-observability" id="cat21">Monitoring and Observability</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                          <div class="parent-category-articles">
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/modern-application-performance">Modern Application Performance</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 18, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/3403739/satrajitbasu.html')">Satrajit Basu</span>
                                        <span class="disable-select icon-core">
                                          <img width="18" height="18" alt="DZone Core" src="https://dz2cdn4.dzone.com/themes/dz20/images/dz-core-icon.png" style="margin: 0 0 3px 5px; filter: brightness(0) invert(1);" />
                                          CORE
                                        </span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/unveiling-the-application-modernization-roadmap-a">Unveiling the Application Modernization Roadmap: A Swift and Secure Journey to the Cloud</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 17, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/4957975/kap-wilson.html')">Kapil Rawal</span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/low-code-vs-traditional-development-a-comprehensiv">Low Code vs. Traditional Development: A Comprehensive Comparison</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">May 16, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/4901748/frontendmag.html')">Tien Nguyen</span>
                                  </p>
                                </div>
                          </div>
                    </div>
                  </div>
                  <div class="parent-category">
                    <div class="parent-category-top">
                      <h3 data-goto="/popular-topics">Popular</h3>
                    </div>
                    <div class="parent-category-body">
                              <div class="parent-category-category" data-click-target="#cat22">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn2.dzone.com/storage/temp/16198243-ai-ml.png" alt="AI/ML"
                                       onerror="this.src='https://dz2cdn3.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/ai-ml" id="cat22">AI/ML</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat23">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn4.dzone.com/storage/temp/16218081-java.png" alt="Java"
                                       onerror="this.src='https://dz2cdn4.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/java" id="cat23">Java</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat24">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn2.dzone.com/storage/temp/16219112-javascript.png" alt="JavaScript"
                                       onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/javascript" id="cat24">JavaScript</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                              <div class="parent-category-category" data-click-target="#cat25">
                                <div class="parent-category-img-container">
                                  <img class="lazyload" src="" data-src="https://dz2cdn4.dzone.com/storage/temp/16220815-open-source.png" alt="Open Source"
                                       onerror="this.src='https://dz2cdn2.dzone.com/themes/dz20/images/question-mark-icon.png'">
                                </div>
                                <p><a href="/open-source" id="cat25">Open Source</a></p>
                                <div class="parent-category-arrow">
                                  <i class="icon-right-open"></i>
                                </div>
                              </div>
                          <div class="parent-category-articles">
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/mastering-prompt-engineering-in-ai-language-models">Mastering Prompt Engineering In AI Language Models</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 17, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/3343119/oriol-saludes.html')">Oriol Sr</span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/linkedins-feed-evolution-more-granular-and-powerfu">LinkedIn’s Feed Evolution: More Granular and Powerful Machine Learning, Humans Still in the Loop</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">November 17, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/1306287/ganadiotis.html')">George Anadiotis</span>
                                  </p>
                                </div>
                                <div class="parent-category-article">
                                  <p class="parent-category-article-title">
                                    <a href="/articles/5-intellij-idea-plugins-that-will-change-the-way-y">Five IntelliJ Idea Plugins That Will Change the Way You Code</a>
                                  </p>
                                  <p class="parent-category-article-details">
                                    <span class="parent-category-article-date">May 15, 2023</span>
                                    by <span class="parent-category-article-author" onclick="window.open('/users/4911883/toxicdev.html')">Toxic Dev</span>
                                  </p>
                                </div>
                          </div>
                    </div>
                  </div>
            </div>
      </div>
      <div id="div-gpt-ad-1435246566686-1" class="leaderboard-ad mt-1 mb-1" data-gpt-slot="homepageLeaderboard2"></div>
    </div>
  </div>
</div>

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', () => {
        // Show shine on large resources when hovering
        const shineElements = document.querySelectorAll('.shine,.sm-shine');
        shineElements.forEach((shineElement) => {
            shineElement.addEventListener('mouseout', () => {
                shineElement.style.setProperty('--opacity', 0);
            });
            shineElement.addEventListener('pointermove', (ev) => {
                const rect = shineElement.getBoundingClientRect();
                shineElement.style.setProperty('--opacity', 1.0);
                shineElement.style.setProperty('--x', ev.clientX - rect.left);
                shineElement.style.setProperty('--y', ev.clientY - rect.top);
            });
        });

        // Link up all title hoverers
        const hoverers = document.querySelectorAll('*[data-title-hover]');
        hoverers.forEach((hoverer) => {
           const title = document.querySelector(hoverer.getAttribute('data-title-hover'));
           if (title) {
               hoverer.style.cursor = 'pointer';
               hoverer.onclick = function () {
                   let target = '_self';
                   if (hoverer.hasAttribute('data-new-window')) {
                       target = '_blank';
                   }
                   window.open(title.href, target);
               };
               if (title.classList.contains('link-hover-underline') || title.classList.contains('link-hover-underline-blue')) {
                   title.addEventListener('mouseout', () => {
                       title.classList.remove('link-hover-underline-active');
                   });
                   title.addEventListener('touchend', () => {
                       setTimeout(() => {
                           title.classList.remove('link-hover-underline-active');
                       }, 100);
                   });
                   hoverer.addEventListener('mouseout', () => {
                       title.classList.remove('link-hover-underline-active');
                   });
                   hoverer.addEventListener('touchend', () => {
                       setTimeout(() => {
                           title.classList.remove('link-hover-underline-active');
                       }, 100);
                   });
                   title.addEventListener('pointermove', () => {
                       title.classList.add('link-hover-underline-active');
                   });
                   hoverer.addEventListener('pointermove', () => {
                       title.classList.add('link-hover-underline-active');
                   });
               }
           }
        });
    });
</script><link rel="stylesheet" media="all" href="https://dz2cdn2.dzone.com/themes/dz20/ftl/footer/styles.css">

<div id="ftl-footer">
  <div class="container-fluid footerOuter">
    <div class="row">
      <div class="col-md-12">
        <div class="container">
          <div class="row footer">
            <div class="col-md-12 footerWidget">
              <div class="row footerContainer footer">
                <div class="left col-xs-12 col-sm-7">
                  <div class="col-xs-12 social-media-icons footer-mobile">
                    <ul class="icons-only">
                      <li class="rss-icon" id="rss-footer-1">
                        <a href="/pages/feeds" target="_blank" rel="noreferrer noopener">
                          <i class="icon-rss-1"></i>
                        </a>
                      </li>
                      <li class="twitter-icon">
                        <a href="https://twitter.com/DZoneInc" target="_blank" rel="noreferrer noopener">
                          <i class="icon-twitter"></i>
                        </a>
                      </li>
                      <li class="facebook-icon">
                        <a href="https://www.facebook.com/DZoneInc" target="_blank" rel="noreferrer noopener">
                          <i class="icon-facebook-1"></i>
                        </a>
                      </li>
                      <li class="linkedin-icon">
                        <a href="https://www.linkedin.com/company/dzone/" target="_blank"
                           rel="noreferrer noopener">
                          <i class="icon-linkedin-1"></i>
                        </a>
                      </li>
                    </ul>
                  </div>

                  <div class="top-section col-xs-12">
                    <div class="col-xs-12 col-sm-6">
                      <p class="section-header">ABOUT US</p>
                      <ul class="link-group">
                        <li><a href="/pages/about" rel="noreferrer noopener">About DZone</a></li>
                        <li><a href="mailto:support@dzone.com" rel="noreferrer noopener">Send feedback</a></li>
                        <li><a href="https://careers.dzone.com/" target="_blank" rel="noreferrer noopener">Careers</a></li>
                          <li><a href="/sitemap" rel="noreferrer noopener">Sitemap</a></li>
                      </ul>
                    </div>
                    <div class="col-xs-12 col-sm-6">
                      <p class="section-header">ADVERTISE</p>
                      <ul class="link-group">
                        <li><a href="https://advertise.dzone.com" target="_blank" rel="noreferrer noopener">Advertise with DZone</a></li>
                      </ul>
                    </div>
                  </div>

                  <div class="bottom-section col-xs-12">
                    <div class="col-xs-12 col-sm-6">
                      <p class="section-header">CONTRIBUTE ON DZONE</p>
                      <ul class="bottom-top-list link-group">
                        <li><a href="/articles/dzones-article-submission-guidelines">Article Submission Guidelines</a></li>
                        <li><a href="/pages/contribute" rel="noreferrer noopener">Become a Contributor</a></li>
                        <li><a href="/pages/core" rel="noreferrer noopener">Core Program</a></li>
                        <li><a href="/writers-zone" rel="noreferrer noopener">Visit the Writers' Zone</a></li>
                      </ul>

                      <p class="section-header">LEGAL</p>
                      <ul class="link-group">
                        <li><a href="https://technologyadvice.com/terms-conditions/" target="_blank" rel="noreferrer noopener">Terms of Service</a></li>
                        <li><a href="https://technologyadvice.com/privacy-policy/" target="_blank" rel="noreferrer noopener">Privacy Policy</a></li>
                      </ul>
                    </div>
                    <div class="col-xs-12 col-sm-6">
                      <p class="section-header">CONTACT US</p>
                      <ul class="link-group">
                        <li>3343 Perimeter Hill Drive</li>
                        <li>Suite 100</li>
                        <li>Nashville, TN 37211</li>
                        <li><a href="mailto:support@dzone.com" rel="noreferrer noopener">support@dzone.com</a></li>
                      </ul>
                    </div>
                  </div>
                </div>

                <div class="right col-xs-12 col-sm-5">

                  <p class="connect-text">Let's be friends:</p>
                  <div class="col-xs-12 social-media-icons footer-wide">
                    <ul class="icons-only">
                      <li class="rss-icon" id="rss-footer-1">
                        <a href="/pages/feeds" target="_blank" rel="noreferrer noopener">
                          <i class="icon-rss-1"></i>
                        </a>
                      </li>
                      <li class="twitter-icon">
                        <a href="https://twitter.com/DZoneInc" target="_blank" rel="noreferrer noopener">
                          <i class="icon-twitter"></i>
                        </a>
                      </li>
                      <li class="facebook-icon">
                        <a href="https://www.facebook.com/DZoneInc" target="_blank" rel="noreferrer noopener">
                          <i class="icon-facebook-1"></i>
                        </a>
                      </li>
                      <li class="linkedin-icon">
                        <a href="https://www.linkedin.com/company/dzone/" target="_blank"
                           rel="noreferrer noopener">
                          <i class="icon-linkedin-1"></i>
                        </a>
                      </li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div><script async src="https://securepubads.g.doubleclick.net/tag/js/gpt.js"></script>

<script async>
    (function(w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({'gtm.start': new Date().getTime(), event: 'gtm.js'});
        var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
        j.async = true;
        j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
        f.parentNode.insertBefore(j,f);
    })(window, document, 'script', 'dataLayer', 'GTM-K25QL22');
</script>

<script>
    window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
    ga('create', 'UA-410289-1', 'auto');
    ga('require', 'linkid', 'linkid.js');
    ga('require', 'GTM-TSD9TZP');
    ga('set', 'siteSpeedSampleRate', 25);
</script>

<script async src="https://www.google-analytics.com/analytics.js"></script>

<script async>
    if (window.ga) {
        window.ga('send', 'pageview');
    }
</script>

<script>
    const gptTags = {
        'siteSection': 'homepage',
        'jobRole': '',
        'companySize': ''
    }
</script>

<script src="https://dz2cdn1.dzone.com/themes/dz20/lib/static/jquery/jquery.min.js"></script>
<script async src="https://dz2cdn1.dzone.com/themes/dz20/ftl/article/ads.js"></script>

<script>
    (function (w,d,t) {
        _ml = w._ml || {};
        _ml.eid = '65559';
        var s, cd, tag; s = d.getElementsByTagName(t)[0]; cd = new Date();
        tag = d.createElement(t); tag.async = 1;
        tag.src = 'https://ml314.com/tag.aspx?' + cd.getDate() + cd.getMonth();
        s.parentNode.insertBefore(tag, s);
    })(window,document,'script');
</script>

<script>
    !function(e,t,c,n,o,a,m){e._bmb||(o=e._bmb=function(){o.x?o.x.apply(o,arguments):o.q.push(arguments)},o.q=[],a=t.createElement(c),a.async=true,a.src="https://vi.ml314.com/get?eid=65559&tk=v56Edzruvd7dE2f68VuNhft2O2fbnq2blg8566IFCW1MX43d&fp="+(e.localStorage&&e.localStorage.getItem(n)||""),m=t.getElementsByTagName(c)[0],m.parentNode.insertBefore(a,m))}(window,document,"script","_ccmaid");
</script></body>
</html>